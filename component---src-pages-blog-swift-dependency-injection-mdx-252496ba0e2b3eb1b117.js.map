{"version":3,"sources":["webpack:///./src/pages/blog/swift-dependency-injection.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","filename","alt","caption","name","isMDXComponent"],"mappings":"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","file":"component---src-pages-blog-swift-dependency-injection-mdx-252496ba0e2b3eb1b117.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/noahgilmore.com/noahgilmore.com/src/components/BlogPageLayout.jsx\";\nimport CaptionedImage from '../../components/CaptionedImage';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`At the most recent `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.meetup.com/swift-language/\"\n      }}>{`Swift Language User Group`}</a>{` meetup, `}<a parentName=\"p\" {...{\n        \"href\": \"https://twitter.com/patbarry\"\n      }}>{`Patrick Barry`}</a>{` presented a `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.youtube.com/watch?v=dA9rGQRwHGs\"\n      }}>{`great talk`}</a>{` about how Lyft implements dependency injection. I'd highly recommend watching the video - I was impressed by how clean and functional the solution they came up with is. I was going to write up a summary for my coworkers, but figured I might as well put it here for the benefit of anyone who's interested.`}</p>\n    <p>{`This post describes the very simple approach to dependency injection presented in the talk, using new functions `}<inlineCode parentName=\"p\">{`bind`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`mock`}</inlineCode>{`. I'll paraphrase some code in this write up, but the concepts and function names will match the talk.`}</p>\n    <p><em parentName=\"p\">{`Edit (4/30/2019): This post describes a nice Swift implementation of a pattern similar to the `}<a parentName=\"em\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Service_locator_pattern\"\n        }}>{`Service Locator Pattern`}</a>{`, considered by many to be a strong anti-pattern. Like Singletons, you should use Service Locator carefully - I've added a `}<a parentName=\"em\" {...{\n          \"href\": \"#downsides\"\n        }}>{`section`}</a>{` at the end about drawbacks of this approach.`}</em></p>\n    <h2 {...{\n      \"id\": \"dependency-injection\"\n    }}>{`Dependency Injection`}</h2>\n    <p>{`I won't go into detail on what dependency injection is, since there's a fair amount of time in the talk dedicated to it. Instead, let's think about an example.`}</p>\n    <p>{`Say we're writing an app to display info about cats. We would have a `}<inlineCode parentName=\"p\">{`Cat`}</inlineCode>{` model in our app:`}</p>\n    <pre {...{\n      \"className\": \"dark-default-dark vscode-highlight\",\n      \"data-language\": \"swift\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`struct`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`Cat`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: Codable {`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`    `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`let`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` name: `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`String`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`    `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`let`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` image: URL`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`}`}</span></span></code></pre>\n    <p>{`And let's assume we have an API to fetch a cat by name:`}</p>\n    <pre {...{\n      \"className\": \"dark-default-dark vscode-highlight\",\n      \"data-language\": \"\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`GET /cat?id=2`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`{`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`    \"name\": \"Maggie\",`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`    \"image\": \"https://placekitten.com/200/200\"`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`}`}</span></code></pre>\n    <p>{`From an architectural point of view, we want to extract this into two different parts:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A `}<inlineCode parentName=\"li\">{`NetworkService`}</inlineCode>{` which makes the requests`}</li>\n      <li parentName=\"ol\">{`A `}<inlineCode parentName=\"li\">{`CatService`}</inlineCode>{` which exposes a `}<inlineCode parentName=\"li\">{`getCat(id:)`}</inlineCode>{` method (this calls into the network service)`}</li>\n    </ol>\n    <CaptionedImage filename=\"swift-di-1.png\" alt=\"Diagram of CatService calling NetworkService\" caption=\"\" mdxType=\"CaptionedImage\" />\n    <h2 {...{\n      \"id\": \"binding\"\n    }}>{`Binding`}</h2>\n    <p>{`There's a clear `}<a parentName=\"p\" {...{\n        \"href\": \"#seam\"\n      }}>{`seam`}</a>{` between the `}<inlineCode parentName=\"p\">{`NetworkService`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`CatService`}</inlineCode>{` that we can use to test `}<inlineCode parentName=\"p\">{`CatService`}</inlineCode>{`. Let's extract the network's functionality into an interface:`}</p>\n    <pre {...{\n      \"className\": \"dark-default-dark vscode-highlight\",\n      \"data-language\": \"swift\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`protocol`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`NetworkInterface`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` {`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`    `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`func`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`makeRequest`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`(`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`url`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: URL,`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`completion`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`@escaping`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` (Result<Data, `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`Error`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`>) -> `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`Void`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`    )`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`}`}</span></span></code></pre>\n    <p>{`And the concrete implementation:`}</p>\n    <pre {...{\n      \"className\": \"dark-default-dark vscode-highlight\",\n      \"data-language\": \"\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`private class NetworkService: NetworkInterface {`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`    func makeRequest(`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`        url: URL,`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`        completion: @escaping (Result<Data, Error>) -> Void`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`    ) {`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`        // Use URLSession, etc`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`    }`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`}`}</span></code></pre>\n    <p>{`And now for the really interesting part - `}<inlineCode parentName=\"p\">{`NetworkService`}</inlineCode>{` will `}<em parentName=\"p\">{`expose itself using a special function called bind`}</em>{` (I've added the \"SimpleDI\" namespace here):`}</p>\n    <pre {...{\n      \"className\": \"dark-default-dark vscode-highlight\",\n      \"data-language\": \"swift\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`let`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` getNetwork = SimpleDI.`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`bind`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`(NetworkInterface.self) { `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`NetworkService`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`() }`}</span></span></code></pre>\n    <p><inlineCode parentName=\"p\">{`bind`}</inlineCode>{` returns `}<inlineCode parentName=\"p\">{`getNetwork`}</inlineCode>{` as a function which can be called to get a concrete implementation of the `}<inlineCode parentName=\"p\">{`NetworkInterface`}</inlineCode>{` protocol. `}<inlineCode parentName=\"p\">{`CatService`}</inlineCode>{` can then call `}<inlineCode parentName=\"p\">{`getNetwork`}</inlineCode>{` to get access to the network:`}</p>\n    <pre {...{\n      \"className\": \"dark-default-dark vscode-highlight\",\n      \"data-language\": \"\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`class CatService {`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`    func getCat(id: Int, completion: @escaping (Result<Cat, Error>) -> Void) {`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`        let network = getNetwork()`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`        network.makeRequest(/* ... */)`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`    }`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`}`}</span></code></pre>\n    <CaptionedImage filename=\"swift-di-2.png\" alt=\"Diagram of CatService calling NetworkService, with bind as an intermediary\" caption=\"\" mdxType=\"CaptionedImage\" />\n    <h2 {...{\n      \"id\": \"implementation\"\n    }}>{`Implementation`}</h2>\n    <p>{`Before we talk about why `}<inlineCode parentName=\"p\">{`bind`}</inlineCode>{` is useful, let's discuss the implementation. `}<inlineCode parentName=\"p\">{`bind`}</inlineCode>{` returns a function which takes no parameters and returns a type of `}<inlineCode parentName=\"p\">{`NetworkInterface`}</inlineCode>{`, but it also takes a closure which will be used to generate the concrete implementation.`}</p>\n    <p><inlineCode parentName=\"p\">{`bind`}</inlineCode>{`'s body looks like this (again, paraphrased a bit from the talk):`}</p>\n    <pre {...{\n      \"className\": \"dark-default-dark vscode-highlight\",\n      \"data-language\": \"swift\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`private`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`var`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` instantiators: [`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`String`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`Any`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`] = [:]`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`enum`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`SimpleDI`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` {`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`    `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`static`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`func`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`bind`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`<`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`T`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`>(`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`_`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk12\"\n          }}>{`interfaceType`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: T.Type,`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`instantiator`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`@escaping`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` () -> T`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`    ) -> () -> T {`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        instantiators[`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`String`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`(`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`describing`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: interfaceType)] = instantiator`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk15\"\n          }}>{`return`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`self`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`.`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk12\"\n          }}>{`instance`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`    }`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`    `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`private`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`static`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`func`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`instance`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`<`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`T`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`>() -> T {`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`let`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` key = `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`String`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`(`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`describing`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: T.self)`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`let`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` instantiator = instantiators[key] as! () -> T`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk15\"\n          }}>{`return`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`instantiator`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`()`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`    }`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`}`}</span></span></code></pre>\n    <p>{`We take the closure that we're passed and save it in a dictionary (`}<a parentName=\"p\" {...{\n        \"href\": \"#dictionary-atomic\"\n      }}>{`see end note`}</a>{`), then return a function which accesses and calls the closure we provided. Though we have to do some force casting, we're guaranteed that the closure we need will be there when `}<inlineCode parentName=\"p\">{`getNetworkInterface`}</inlineCode>{` is called, since we put it into `}<inlineCode parentName=\"p\">{`instantiators`}</inlineCode>{` before returning from `}<inlineCode parentName=\"p\">{`bind`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"testability\"\n    }}>{`Testability`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`bind`}</inlineCode>{` adds a level of indirection at the seam between `}<inlineCode parentName=\"p\">{`NetworkService`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`CatService`}</inlineCode>{`, which allows us to stub in a mock in tests. In order to do that, we need to define `}<inlineCode parentName=\"p\">{`mock`}</inlineCode>{` as well, and add a bit of more infrastructure:`}</p>\n    <pre {...{\n      \"className\": \"dark-default-dark vscode-highlight\",\n      \"data-language\": \"swift\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`private`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`var`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` instantiators: [`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`String`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`Any`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`] = [:]`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`private`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`var`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` mockInstantiators: [`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`String`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`Any`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`] = [:]`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`enum`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`SimpleDI`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` {`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`    `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`static`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`var`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` isTestEnvironment = `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`false`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`    `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`static`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`func`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`bind`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`<`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`T`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`>(`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`_`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk12\"\n          }}>{`type`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: T.Type,`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`instantiator`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`@escaping`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` () -> T`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`    ) -> () -> T {`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        instantiators[`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`String`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`(`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`describing`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: type)] = instantiator`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk15\"\n          }}>{`return`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`self`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`.`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk12\"\n          }}>{`instance`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`    }`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`    `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`private`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`static`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`func`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`instance`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`<`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`T`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`>() -> T {`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`let`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` key = `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`String`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`(`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`describing`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: T.self)`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk15\"\n          }}>{`if`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`self`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`.`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk12\"\n          }}>{`isTestEnvironment`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` {`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`            `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk15\"\n          }}>{`guard`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`let`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` instantiator = mockInstantiators[key] as? () -> T `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk15\"\n          }}>{`else`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` {`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`                `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`fatalError`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`(`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk8\"\n          }}>{`\"Type `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk6\"\n          }}>{`\\\\\\\\`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk8\"\n          }}>{`(key) unmocked in test!\"`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`)`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`            }`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`            `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk15\"\n          }}>{`return`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`instantiator`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`()`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        }`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`let`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` instantiator = instantiators[key] as! () -> T`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk15\"\n          }}>{`return`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`instantiator`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`()`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`    }`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}></span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`    `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`static`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`func`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`mock`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`<`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`T`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`>(`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`_`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk12\"\n          }}>{`type`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: T.Type, `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`instantiator`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk4\"\n          }}>{`@escaping`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{` () -> T) {`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`        mockInstantiators[`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk10\"\n          }}>{`String`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`(`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`describing`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: type)] = instantiator`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`    }`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`}`}</span></span></code></pre>\n    <p>{`This code isn't very pretty - in fact, checks like `}<inlineCode parentName=\"p\">{`isTestEnvironment`}</inlineCode>{` are generally a code smell that mean you should refactor how the class works to avoid the check. However, this enables us to write tests very easily: all we have to do is set `}<inlineCode parentName=\"p\">{`isTestEnvironment = true`}</inlineCode>{`, and we'll be able to `}<a parentName=\"p\" {...{\n        \"href\": \"#mock\"\n      }}>{`stub in a mock`}</a>{` immediately using `}<inlineCode parentName=\"p\">{`mock`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`Let's say we want to write a test which makes sure CatService reports an error when the underlying network errors:`}</p>\n    <pre {...{\n      \"className\": \"dark-default-dark vscode-highlight\",\n      \"data-language\": \"\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`class NetworkThatAlwaysErrors: NetworkInterface {`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`    func makeRequest(url: URL, completion: @escaping (Result<Data>) -> Void) {`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`        completion(.error(error: NSError(domain: \"\", code: 0, userInfo: nil)))`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`    }`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`}`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`class CatServiceTestCase: XCTestCase {`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`    func testCatServiceReportsError() {`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`        SimpleDI.isTestEnvironment = true`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`        SimpleDI.mock(NetworkInterface.self) { NetworkThatAlwaysErrors() }`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`        let expecation = self.expectation(description: \"Should return error\")`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`        let service = CatService()`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`        service.getCatImage(named: \"Maggie\", completion: { result in`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`            if case .error = result {`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`                expecation.fulfill()`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`            }`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`        })`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`        self.waitForExpectations(timeout: 0.2)`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`    }`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`}`}</span></code></pre>\n    <p><inlineCode parentName=\"p\">{`bind`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`mock`}</inlineCode>{` take the dirty work of setting up the DI/mocking infrastructure and hide it under the rug, allowing us to write more expressive tests easily.`}</p>\n    <CaptionedImage filename=\"swift-di-3.png\" alt=\"Diagram of bind and mock being used to separate CatService and NetworkService and stub in a mock in tests\" caption=\"\" mdxType=\"CaptionedImage\" />\n    <p>{`Some interesting things to note:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Many people who've worked with DI have horror stories of passing 10/15+ dependencies into an initializer so they can be mocked in tests. `}<inlineCode parentName=\"li\">{`bind`}</inlineCode>{` brings the argument count down to 0 without sacrificing testability, and makes both the service and the test more elegant.`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`bind`}</inlineCode>{` will error if you forget to mock out an interface in a test, so you're never accidentally calling deeper into dependencies than you mean to.`}</li>\n    </ol>\n    <a name=\"downsides\"></a>\n    <h2 {...{\n      \"id\": \"downsides\"\n    }}>{`Downsides`}</h2>\n    <p>{`This approach is very similar to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Service_locator_pattern\"\n      }}>{`Service Locator Pattern`}</a>{`, which is commonly criticized. I really enjoyed `}<a parentName=\"p\" {...{\n        \"href\": \"https://badootech.badoo.com/singleton-service-locator-and-tests-in-ios-d69484e88944\"\n      }}>{`this article`}</a>{` about Service Locator in iOS, and there are a few downsides that I should mention:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Using a service locator registry like `}<inlineCode parentName=\"li\">{`bind`}</inlineCode>{` means you have implicit instead of explicit dependencies. Instead of knowing explicitly that `}<inlineCode parentName=\"li\">{`CatService`}</inlineCode>{` depends on `}<inlineCode parentName=\"li\">{`NetworkService`}</inlineCode>{`, you have to look for the call to `}<inlineCode parentName=\"li\">{`getNetwork`}</inlineCode>{`. There's a tradeoff between the simplicity of using a service locator and the fact that it can make services with many dependencies more complex to reason about.`}</li>\n      <li parentName=\"ol\">{`With `}<inlineCode parentName=\"li\">{`bind`}</inlineCode>{`, it can be tough to recognize that you can update a test when a dependency of a service is removed. If `}<inlineCode parentName=\"li\">{`CatService`}</inlineCode>{` stopped calling out to the network, it's wouldn't be immediately apparent that `}<inlineCode parentName=\"li\">{`NetworkThatAlwaysErrors`}</inlineCode>{` could be deleted. This can lead to unnessary cognitive overhead in tests.`}</li>\n      <li parentName=\"ol\">{`When calling `}<inlineCode parentName=\"li\">{`mock`}</inlineCode>{`, you have to be `}<em parentName=\"li\">{`very`}</em>{` careful to set up your testing framework such that all the mocks get cleared after every test. Otherwise, you might have different behavior based on the order the tests are run, which can lead to flakes.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"conclusion\"\n    }}>{`Conclusion`}</h2>\n    <p>{`It was really interesting to see how Lyft was able to come up with such a simple solution to a complex problem. I'd really recommend watching `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.youtube.com/watch?v=dA9rGQRwHGs\"\n      }}>{`the talk`}</a>{` if you're interested in dependency injection and testing. If you'd like to see a working example of `}<inlineCode parentName=\"p\">{`bind`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`mock`}</inlineCode>{`, I've put one `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/noahsark769/NGSimpleDIExample\"\n      }}>{`here`}</a>{` (it has a few differences from the code in this post in order to demonstrate an actual working request and test).`}</p>\n    <h2 {...{\n      \"id\": \"footnotes\"\n    }}>{`Footnotes`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a name=\"dictionary-atomic\"></a>Dictionary is not thread safe, so if you want to use `bind` and `mock` on multiple threads you'll need to implement something similar to an [atomic box](https://www.objc.io/blog/2018/12/18/atomic-variables/) (the talk mentions this).</li>\n      <li parentName=\"ol\"><a name=\"seam\"></a>\"[Seam](http://wiki.c2.com/?SoftwareSeam)\" is a concept that seems to have been first coined in [Working Effectively With Legacy Code](https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052). It's defined as \"[a place where two parts of the software meet and where something else can be injected](https://softwareengineering.stackexchange.com/questions/132563/problem-with-understanding-seam-word/311122)\".</li>\n      <li parentName=\"ol\"><a name=\"mock\"></a>You could even put `mock` in your test target to make sure it can't be called in production!</li>\n    </ol>\n\n    <style {...{\n      \"className\": \"vscode-highlight-styles\"\n    }}>{`\n  \n  .dark-default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.dark-default-dark .mtk1 { color: #D4D4D4; }\n.dark-default-dark .mtk2 { color: #1E1E1E; }\n.dark-default-dark .mtk3 { color: #6A9955; }\n.dark-default-dark .mtk4 { color: #569CD6; }\n.dark-default-dark .mtk5 { color: #D16969; }\n.dark-default-dark .mtk6 { color: #D7BA7D; }\n.dark-default-dark .mtk7 { color: #B5CEA8; }\n.dark-default-dark .mtk8 { color: #CE9178; }\n.dark-default-dark .mtk9 { color: #646695; }\n.dark-default-dark .mtk10 { color: #4EC9B0; }\n.dark-default-dark .mtk11 { color: #DCDCAA; }\n.dark-default-dark .mtk12 { color: #9CDCFE; }\n.dark-default-dark .mtk13 { color: #000080; }\n.dark-default-dark .mtk14 { color: #F44747; }\n.dark-default-dark .mtk15 { color: #C586C0; }\n.dark-default-dark .mtk16 { color: #6796E6; }\n.dark-default-dark .mtk17 { color: #808080; }\n.dark-default-dark .mtki { font-style: italic; }\n.dark-default-dark .mtkb { font-weight: bold; }\n.dark-default-dark .mtku { text-decoration: underline; text-underline-position: under; }\n`}</style>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}