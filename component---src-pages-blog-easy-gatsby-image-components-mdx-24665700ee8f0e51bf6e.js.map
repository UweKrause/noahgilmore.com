{"version":3,"sources":["webpack:///./src/pages/blog/easy-gatsby-image-components.mdx"],"names":["__webpack_exports__","_ref","components","props","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0___default","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_2__","name","Layout","DefaultLayout","layoutProps","parentName","href","className","metaString","_frontmatter"],"mappings":"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","file":"component---src-pages-blog-easy-gatsby-image-components-mdx-24665700ee8f0e51bf6e.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/Users/noahgilmore/code/noahgilmore.com/src/components/BlogPageLayout.jsx\"\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\" Layout={DefaultLayout} layoutProps={props} components={components}>\n\n<MDXTag name=\"p\" components={components}>{`I use `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://gatsbyjs.org\"}}>{`Gatsby`}</MDXTag>{` as a static site generator to build this blog using React. As part of this, I wanted a simple component to display a static image, something like this:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"metaString\":\"\"}}>{`<Image filename=\"myimage.png\" />\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Surprisingly, this is hard to do in Gatsby. The default Image component generated by Gatsby uses `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`StaticQuery`}</MDXTag>{`:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"metaString\":\"\"}}>{`import Img from 'gatsby-image'\n\nconst Image = () => (\n  <StaticQuery\n    query={graphql\\`\n      query {\n        placeholderImage: file(relativePath: { eq: \"gatsby-astronaut.png\" }) {\n          childImageSharp {\n            fluid(maxWidth: 300) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    \\`}\n    render={data => <Img fluid={data.placeholderImage.childImageSharp.fluid} />}\n  />\n)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Simple enough - I figured I could make it customizable using props:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"metaString\":\"\"}}>{`const Image = (props) => (\n  <StaticQuery\n    query={graphql\\`\n      query {\n        placeholderImage: file(relativePath: { eq: \\${props.filename} }) {\n          childImageSharp {\n            fluid(maxWidth: 300) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    \\`}\n    render={data => <Img fluid={data.placeholderImage.childImageSharp.fluid} />}\n  />\n)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Unfortunately this doesn't actually work - `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`StaticQuery`}</MDXTag>{` is called \"Static\" because it's compiled and doesn't support string interpolation in its template literal. If you try to do this, you'll see an error like this on build:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-nohighlight\",\"metaString\":\"\"}}>{`Error: BabelPluginRemoveGraphQL: String interpolations are not allowed in graphql fragments. Included fragments should be referenced as \\`...MyModule_foo\\`.\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This behavior is `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.gatsbyjs.org/docs/static-query/\"}}>{`documented`}</MDXTag>{` by Gatsby, and that documentation notes that the alternative is to use a page query. I didn't want to put a query on every page with images though, so I started investigating other options.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`I came across `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://medium.freecodecamp.org/how-i-made-my-portfolio-website-blazing-fast-with-gatsby-82ccddc2f671\"}}>{`this post`}</MDXTag>{` by someone who had been doing some fancier image querying with Gatsby - she had the foresight to `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`query all the images upfront`}</MDXTag>{` by using the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`allFile`}</MDXTag>{` query, and filter them down with props later. Based on that, I implemented the following component, which works great and includes all the fun functionality that `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.gatsbyjs.org/packages/gatsby-image/\"}}>{`gatsby-image`}</MDXTag>{` offers:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"metaString\":\"\"}}>{`import Img from 'gatsby-image'\n\nconst Image = (props) => (\n  <StaticQuery\n    query={graphql\\`\n      query {\n        images: allFile {\n          edges {\n            node {\n              relativePath\n              name\n              childImageSharp {\n                sizes(maxWidth: 600) {\n                  ...GatsbyImageSharpSizes\n                }\n              }\n            }\n          }\n        }\n      }\n    \\`}\n\n    render={(data) => {\n      const image = data.images.edges.find(n => {\n        return n.node.relativePath.includes(props.filename);\n      });\n      if (!image) { return null; }\n      \n      const imageSizes = image.node.childImageSharp.sizes;\n      return (\n        <Img\n          alt={props.alt}\n          sizes={imageSizes}\n        />\n      );\n    }}\n  />\n)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Hopefully that snippet helps if you're trying to do something similar. If it does, `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://twitter.com/noahsark769\"}}>{`let me know`}</MDXTag>{` ðŸ‘‹`}</MDXTag></MDXTag>\n\nexport const _frontmatter = {};\n\n  "],"sourceRoot":""}