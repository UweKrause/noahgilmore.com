{"version":3,"sources":["webpack:///./src/components/CaptionedImage.jsx","webpack:///./src/pages/blog/pyparsing-trees.mdx"],"names":["Container","styled","div","withConfig","displayName","componentId","Caption","CaptionedImage","render","react_default","a","createElement","Image","filename","this","props","alt","caption","React","Component","__webpack_exports__","_ref","components","objectWithoutPropertiesLoose_default","dist","name","Layout","DefaultLayout","layoutProps","parentName","href","CaptionedImage_CaptionedImage","className","metaString","_frontmatter"],"mappings":"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","file":"component---src-pages-blog-pyparsing-trees-mdx-339dedd6dbadd4b90ef3.js","sourcesContent":["import React from 'react';\nimport styled from \"styled-components\";\nimport Image from \"../components/Image\";\n\nconst Container = styled.div`\n    margin: 20px 0;\n`;\n\nconst Caption = styled.div`\n    font-family: \"Gentium Book Basic\", times, serif;\n    font-style: italic;\n    font-size: 16px;\n    color: #999;\n    margin-bottom: 30px;\n\n    img {\n        width: 100%;\n        margin-bottom: 10px;   \n    }\n`;\n\nexport default class CaptionedImage extends React.Component {\n    render() {\n        return (\n            <Container>\n                <Image filename={this.props.filename} alt={this.props.alt} />\n                <Caption>{this.props.caption}</Caption>\n            </Container>\n        );\n    }\n};\n","import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/Users/noahgilmore/code/noahgilmore.com/src/components/BlogPageLayout.jsx\"\nimport CaptionedImage from '../../components/CaptionedImage';\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\" Layout={DefaultLayout} layoutProps={props} components={components}>\n\n\n<MDXTag name=\"p\" components={components}>{`Let's talk about `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\"}}>{`syntax trees`}</MDXTag>{`. In static analysis, a common operation is to take a character string (e.g. \"x = 1\") and transform it into well structured data:`}</MDXTag>\n<CaptionedImage filename=\"pyparsing-trees-1.png\" alt=\"Simple syntax tree\" caption=\"This is a simple example of course.\" />\n<MDXTag name=\"p\" components={components}>{`Let's try to do this in python. We'll use `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://pyparsing.wikispaces.com/\"}}>{`Pyparsing`}</MDXTag>{` as our tokenization tool - you can use pyparsing's rules to build a grammar, from which you can get back a list of token data.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-python\",\"metaString\":\"\"}}>{`from pyparsing import alphas, Word, Literal, nums\n\ngrammar = Literal(\"var\") + Word(alphas) + Literal(\"=\") + Word(nums)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"metaString\":null}}>{`>>> print(grammar.parseString(\"var x = 1\"))\n['var', 'x', '=', '1']\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This is great, but what if we need a tree instead of an array of tokens?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For example, let's say we have a language that describes a tree, where each node in the tree can have a number. Each node is represented by a pair of parentheses, and inside is the value followed by the child nodes:`}</MDXTag>\n<CaptionedImage filename=\"pyparsing-trees-2.png\" alt=\"Simple syntax tree\" caption=\"\" />\n<MDXTag name=\"p\" components={components}>{`How could we write a parser for this? It differs in a couple of ways from the first example:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`It's inherently recursive, since after the value in each node, zero or more child nodes can follow:`}</MDXTag>\n<MDXTag name=\"pre\" components={components} parentName=\"li\"><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-nohighlight\",\"metaString\":\"\"}}>{`node := (value[, node, node, node, ...])\n`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`If we just parse the string as a list, we won't be able to preserve the tree structure.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h3\" components={components}>{`Recursive grammars with pyparsing`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Pyparsing supports recursive grammars using a grammar component called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Forward`}</MDXTag>{`. To define a recursive grammar, you create a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pyparsing.Forward()`}</MDXTag>{`, then use the shift left operator to set its content:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-python\",\"metaString\":\"\"}}>{`grammar = pyparsing.Forward()\ngrammar << pyparsing.Suppress(\"(\") + pyparsing.Word(\"0123456789\") + pyparsing.ZeroOrMore(grammar) + pyparsing.Suppress(\")\")\n\nquery = \"(1 (2 (3)) (4 (5 (6) (7) (8)))\"\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"metaString\":null}}>{`>>> print(grammar.parseString(query))\n['5', '6', '7', '9', '9', '5', '6', '7', '8', '9', '7', '8', '9']\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This parses the grammar, but we still don't have the tree structure.`}</MDXTag>\n<MDXTag name=\"h3\" components={components}>{`Parse actions`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Pyparsing allows a \"parse action\" to be defined:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-python\",\"metaString\":\"\"}}>{`def action(string, location, tokens):\n    return tokens\n\ngrammar.setParseAction(action)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The parse action is a function which will be applied every time a parse element generates output. It takes three arguments:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`The full input string being parsed.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`The location of the parse element as an index into the full string.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`The list generated tokens, as strings.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The value returned from the parse action function will replace the string tokens, and the default implementation does nothing with the tokens and just returns them the way they are. The parse action is our chance to hook into pyparsing and output structured data instead of strings.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`As an example:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-python\",\"metaString\":\"\"}}>{`import pyparsing\n\nclass Item:\n    def __init__(self, value):\n        self.value = value\n\n    def __repr__(self):\n        return \"{Item: %s}\" % self.value\n\ndef transform(string, location, tokens):\n    return [Item(token) for token in tokens]\n\ngrammar = Literal(\"var\") + Word(alphas) + Literal(\"=\") + Word(nums)\ngrammar.setParseAction(transform)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"metaString\":null}}>{`>>> print(grammar.parseString(\"var x = 1\"))\n[{Item: var}, {Item: x}, {Item: =}, {Item: 1}]\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now we have items instead of strings.`}</MDXTag>\n<MDXTag name=\"h3\" components={components}>{`Building a tree`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Let's apply this to the tree grammar to build a tree. We'll define a simple node class:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-python\",\"metaString\":\"\"}}>{`from collections import namedtuple\n\nNode = namedtuple(\"Node\", [\"value\", \"children\"])\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`And define the recursive grammar:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-python\",\"metaString\":\"\"}}>{`from pyparsing import Forward, Suppress, Word, ZeroOrMore\n\ngrammar = Forward()\ngrammar << Suppress(\"(\") + Word(\"0123456789\") + ZeroOrMore(grammar) + Suppress(\")\")\n\ndef parseAction(string, location, tokens):\n    return Node(value=tokens[0], children=tokens[1:])\n\ngrammar.setParseAction(parseAction)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`And a way to print it out and see if it worked:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-python\",\"metaString\":\"\"}}>{`def pprint(node, tab=\"\"):\n   print tab + u\"┗━ \" + str(node.value)\n   for child in node.children:\n      pprint(child, tab + \"    \")\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"metaString\":null}}>{`>>> pprint(grammar.parseString(\"(1 (2 (3)) (4 (5 (6) (7) (8))))\"))\n┗━ 1\n    ┗━ 2\n        ┗━ 3\n    ┗━ 4\n        ┗━ 5\n            ┗━ 6\n            ┗━ 7\n            ┗━ 8\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Not bad: a simple parser in 9 lines of code.`}</MDXTag></MDXTag>\n\nexport const _frontmatter = {};\n\n  "],"sourceRoot":""}