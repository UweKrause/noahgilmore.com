{"version":3,"sources":["webpack:///./src/pages/blog/nsobject-equatable.mdx"],"names":["__webpack_exports__","_ref","components","props","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0___default","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_2__","name","Layout","DefaultLayout","layoutProps","parentName","className","metaString","href","_frontmatter"],"mappings":"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","file":"component---src-pages-blog-nsobject-equatable-mdx-d4d7ca2af175a489fba0.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/Users/noahgilmore/code/noahgilmore.com/src/components/BlogPageLayout.jsx\"\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\" Layout={DefaultLayout} layoutProps={props} components={components}>\n\n<MDXTag name=\"p\" components={components}>{`Swift can be tricky sometimes. For example, what does the following print?`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`class A: NSObject {\n  let x: Int\n\n  init(x: Int) {\n    self.x = x\n  }\n}\n\nfunc ==(left: A, right: A) -> Bool {\n  return left.x == right.x\n}\n\nprint(A(x: 1) == A(x: 1))\nprint([A(x: 1)] == [A(x: 1)])\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Perhaps surprisingly, it's this:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-nohighlight\",\"metaString\":\"\"}}>{`true\nfalse // huh?!\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components}>{`Equatable conformance is hard`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Why does comparing two arrays with equal contents return false? It turns out that:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Array is bridged to NSArray`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`NSArray doesn't declare a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`==(_:_:)`}</MDXTag>{` function, so it falls back to NSObject's `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`==(_:_:)`}</MDXTag>{`, which calls `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`isEqual`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`NSArray's `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`isEqual`}</MDXTag>{` `}<MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://github.com/apple/swift-corelibs-foundation/blob/0cbb3225660752987a6c2cf672886fca434d3b1d/Foundation/NSArray.swift#L310\"}}>{`compares objects by casting to AnyHashable`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can see that this is the problem by casting the objects to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`AnyHashable`}</MDXTag>{` before comparing them:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`print(A(x: 1) as AnyHashable == A(x: 1) as AnyHashable)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-nohighlight\",\"metaString\":\"\"}}>{`false\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Apparently, doing this will use the NSObject implementation of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`==(_:_:)`}</MDXTag>{` rather than the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`A`}</MDXTag>{` one. The NSObject implementation of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`==(_:_:)`}</MDXTag>{` checks isEqual, which returns false because the two elements aren't the same in memory. We can see this by adding an override:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`class B: NSObject {\n  let x: Int\n\n  init(x: Int) {\n    self.x = x\n  }\n\n  override func isEqual(_ object: Any?) -> Bool {\n    print(\"isEqual for B\")\n    return super.isEqual(object)\n  }\n}\n\nfunc ==(left: B, right: B) -> Bool {\n  print(\"== for B\")\n  return left.x == right.x\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Then,`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`print([B(x: 1)] == [B(x: 1)])\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-nohighlight\",\"metaString\":\"\"}}>{`isEqual for B\nfalse\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components}>{`The fix`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`As far as I can tell, the best way to make an NSObject subclass use custom equality inside an array is to override isEqual:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`class C: NSObject {\n  let x: Int\n\n  init(x: Int) {\n    self.x = x\n  }\n\n  override func isEqual(_ object: Any?) -> Bool {\n    guard let object = object as? C else { return false }\n    return object == self\n  }\n}\n\nfunc ==(left: C, right: C) -> Bool {\n  print(\"== for C\")\n  return left.x == right.x\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`print([C(x: 1)] == [C(x: 1)])\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-nohighlight\",\"metaString\":\"\"}}>{`== for C\ntrue\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Of course, if we defined `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`A`}</MDXTag>{` as a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`struct`}</MDXTag>{` or a regular `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`class`}</MDXTag>{` in the first place, there won't be `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`==(_:_:)`}</MDXTag>{` defined for `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`[A]`}</MDXTag>{`, which means the compiler would catch our mistake instead of falling back to something that might not work correctly.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Sigh. Working with NSObject can be tricky.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A working playground with the code from this post can be found `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/noahsark769/code-examples/blob/ed9df41aae709eaeb4e334e3e9a5b1a650deef4d/swift/swift-nsobject-equatable.playground/Contents.swift\"}}>{`here`}</MDXTag>{`.`}</MDXTag></MDXTag>\n\nexport const _frontmatter = {};\n\n  "],"sourceRoot":""}