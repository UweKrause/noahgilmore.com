(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{242:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",function(){return r}),n.d(t,"default",function(){return p});n(11),n(12),n(6),n(19),n(21),n(0);var o=n(79),a=n(259),i=n(28);n(67);var r={},l={_frontmatter:r},s=a.a;function p(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(o.b)(s,Object.assign({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"In this post we'll look at a very specific but tricky interaction in UIKit, one which took me multiple days to work out how to implement."),Object(o.b)("p",null,"It's two view controllers of different sizes, pushed on a ",Object(o.b)("inlineCode",{parentName:"p"},"UINavigationController"),", which is presented as a popover. The interaction has a few unique qualities:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"The view controllers have different sizes (defined by autolayout)"),Object(o.b)("li",{parentName:"ol"},"Only one of them displays a nav bar"),Object(o.b)("li",{parentName:"ol"},"The popover animates when their autolayout-defined sizes change"),Object(o.b)("li",{parentName:"ol"},"Including when they get pushed onto the nav stack, where the resize animation happens at the same time as the push animation")),Object(o.b)(i.a,{max:500,filename:"popover-finished.gif",alt:"Finished presentation of UIViewControllers with different content sizes inside a popover",caption:"",mdxType:"CaptionedImage"}),Object(o.b)("p",null,"Surprisingly this is very tricky to implement in UIKit, and it ties together a lot of concepts that I wasn't really familiar with until I ran into this case."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The finished code for this interaction is available at ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/noahsark769/NGPopoverForceResizeTest"}),"NGPopoverForceResizeTest"),". There's also a summary at the bottom of this post.")),Object(o.b)("h1",null,"Motivation"),Object(o.b)("p",null,"At work, we do a fair amount of presenting view controllers as popovers to add context or more data to our existing iPad view. A common flow is the following:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Present a small popover to add more context to something the user tapped."),Object(o.b)("li",{parentName:"ol"},"When the user taps on a button in that popover, push on a new view controller with more information.")),Object(o.b)("p",null,"Seems easy enough, but the kicker is when ",Object(o.b)("em",{parentName:"p"},"the two view controllers are different sizes"),"."),Object(o.b)("p",null,"Let's assume we have two view controllers to present: one 300x300 with a red background and no navigation bar content, and one 600x400 with a green background and a nav bar title. Here's what we want them to look like:"),Object(o.b)(i.a,{max:300,filename:"red-controller.png",alt:"Red view controller",caption:"SmallViewControllerNoNavBar",mdxType:"CaptionedImage"}),Object(o.b)(i.a,{max:500,filename:"green-controller.png",alt:"Green view controller",caption:"LargeViewControllerWithNavBar",mdxType:"CaptionedImage"}),Object(o.b)("h1",null,"preferredContentSize"),Object(o.b)("p",null,"Let's start with the red controller."),Object(o.b)("p",null,"Setting up the width and height is easy enough with autolayout (or so you might think):"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-swift"}),"override func viewDidLoad() {\n    // ...\n    self.view.widthAnchor.constraint(\n        equalToConstant: 300\n    ).isActive = true\n    self.view.heightAnchor.constraint(\n        equalToConstant: 300\n    ).isActive = true\n}\n")),Object(o.b)("p",null,"We'll set the navigation bar hidden in ",Object(o.b)("inlineCode",{parentName:"p"},"viewWillAppear"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-swift"}),"override func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    self.navigationController?.setNavigationBarHidden(true, animated: false)\n}\n")),Object(o.b)("p",null,"And, from the main controller, present our red view as a popover:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-swift"}),"let containerController = UINavigationController(rootViewController: firstVC)\ncontainerController.modalPresentationStyle = .popover\n// ... set the sourceView, sourceRect, etc\nself.present(containerController, animated: true)\n")),Object(o.b)("p",null,"Unfortunately, this doesn't exactly produce the effect we're going for:"),Object(o.b)(i.a,{max:500,filename:"red-controller-1.png",alt:"Red view controller displaying in a popover with the wrong height and width",caption:"Interesting",mdxType:"CaptionedImage"}),Object(o.b)("h2",null,"preferredContentSize + autolayout"),Object(o.b)("p",null,"Our red view controller doesn't have the right size because when ",Object(o.b)("inlineCode",{parentName:"p"},"UIViewController"),"s are presented as popovers, the popover's size is ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://developer.apple.com/documentation/uikit/uiviewcontroller/1621476-preferredcontentsize"}),"determined by the controller's ",Object(o.b)("inlineCode",{parentName:"a"},"preferredContentSize")),". Since we haven't set ",Object(o.b)("inlineCode",{parentName:"p"},"self.preferredContentSize")," in our controller, the system uses the default: on iOS 12 with a 12.9 inch iPad, this is 375x636 points."),Object(o.b)("p",null,"To fix this, we have to trigger a layout pass to determine our autolayout-defined size, and we can set that as our preferred size, as many posts online ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://useyourloaf.com/blog/self-sizing-child-views/"}),"have")," ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://stackoverflow.com/questions/29128271/autolayout-and-uipopovercontroller"}),"detailed"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-swift"}),"override func viewWillAppear(_ animated: Bool) {\n    // ...\n    self.preferredContentSize = self.view.systemLayoutSizeFitting(\n        UIView.layoutFittingCompressedSize\n    )\n}\n")),Object(o.b)("p",null,"Assuming we've implemented the same thing in our green view controller (with different height and width, of course), we now get our controllers displaying their correct sizes! "),Object(o.b)("p",null,"Unfortunately, the animation is a little weird - our green controller starts out 300x300, ",Object(o.b)("em",{parentName:"p"},"then")," transitions to 600x400:"),Object(o.b)(i.a,{max:500,filename:"popover-animation-1.gif",alt:"Red view controller with the right size, pushing on a green view controller, whose size starts the same as the red controller but expands when finished pushing.",caption:"Also interesting",mdxType:"CaptionedImage"}),Object(o.b)("h1",null,"UINavigationController animations"),Object(o.b)("p",null,"Apparently, ",Object(o.b)("inlineCode",{parentName:"p"},"UINavigationController")," queues the animations for pushing on a new view controller and setting its own ",Object(o.b)("inlineCode",{parentName:"p"},"preferredContentSize")," based on the controller being pushed, so the push animation and the resize animation happen in series. Ideally, we'd like these animations to happen simultaneously."),Object(o.b)("p",null,"After quite a bit of spelunking online, I realized that ",Object(o.b)("inlineCode",{parentName:"p"},"UINavigationController")," just doesn't support this use case. However, I stumbled across ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/fatuhoku/Resize-Popover-with-embedded-UINavigationController"}),"this example")," by ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"http://hokshunpoon.me/"}),"Hok Shun Poon"),", which noted that you can get the resize to happen at the same time if you encapsulate the ",Object(o.b)("inlineCode",{parentName:"p"},"UINavigationController")," in a parent view controller!"),Object(o.b)("p",null,"The flow looks like this:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"We have a parent ",Object(o.b)("inlineCode",{parentName:"li"},"UIViewController")," ",Object(o.b)("a",Object.assign({parentName:"li"},{href:"https://useyourloaf.com/blog/container-view-controllers/"}),"wrapping")," our ",Object(o.b)("inlineCode",{parentName:"li"},"UINavigationController"),"."),Object(o.b)("li",{parentName:"ol"},"When the new controller appears, we'll set the wrapper view controller's ",Object(o.b)("inlineCode",{parentName:"li"},"preferredContentSize")," to mirror the child's ",Object(o.b)("inlineCode",{parentName:"li"},"preferredContentSize")," using ",Object(o.b)("inlineCode",{parentName:"li"},"popoverPresentationController"),".")),Object(o.b)("h2",null,"Wrapping the nav controller"),Object(o.b)("p",null,"Our wrapper controller looks like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-swift"}),"final class PopoverPushController: UIViewController {\n    private let wrappedNavigationController: PopoverPushNavigationController\n\n    init(rootViewController: UIViewController) {\n        self.wrappedNavigationController = PopoverPushNavigationController(\n            rootViewController: rootViewController\n        )\n        super.init(nibName: nil, bundle: nil)\n        self.wrappedNavigationController.delegate = self\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        wrappedNavigationController.willMove(toParent: self)\n        self.addChild(wrappedNavigationController)\n        self.view.addSubview(wrappedNavigationController.view)\n    }\n\n    // ...\n}\n")),Object(o.b)("p",null,"When our container controller's view loads, we simply add the navigation controller's view as a subview, after using ",Object(o.b)("inlineCode",{parentName:"p"},"willMove(toParent:)")," and ",Object(o.b)("inlineCode",{parentName:"p"},"addChild()")," to ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://developer.apple.com/documentation/uikit/uiviewcontroller/1621381-willmove"}),"add the navigation controller as a child view controller"),"."),Object(o.b)("p",null,"We also need the implementation of ",Object(o.b)("inlineCode",{parentName:"p"},"viewWillAppear")," to set the wrapper controller's content size. Luckily we can access the wrapper controller using ",Object(o.b)("inlineCode",{parentName:"p"},"popoverPresentationController"),"'s ",Object(o.b)("inlineCode",{parentName:"p"},"presentedViewController"),", even though it's two levels up:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-swift"}),"override func viewWillAppear(_ animated: Bool) {\n    // ...\n    let contentSize = self.view.systemLayoutSizeFitting(\n        UIView.layoutFittingCompressedSize\n    )\n    self.preferredContentSize = contentSize\n    self.popoverPresentationController?\n        .presentedViewController\n        .preferredContentSize = contentSize\n}\n")),Object(o.b)("p",null,"And finally, we'll change our presentation code to present the ",Object(o.b)("inlineCode",{parentName:"p"},"PopoverPushController")," wrapper instead of the regular navigation controller:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-swift"}),"let containerController = PopoverPushController(rootViewController: firstVC)\ncontainerController.modalPresentationStyle = .popover\n// ... set the sourceView, sourceRect, etc\nself.present(containerController, animated: true)\n")),Object(o.b)("p",null,"No we have the simultaneous animation we want!"),Object(o.b)(i.a,{max:500,filename:"popover-animation-2.gif",alt:"Red view controller transitioning to green view controller with size animating at the same time as the push animation.",caption:"🎉",mdxType:"CaptionedImage"}),Object(o.b)("h2",null,"Updating the size"),Object(o.b)("p",null,"Everything's well and good now, so we can implement the last part of the interaction: resizing the green controller on button tap. Our code isn't particularly complicated, but we'll use the same autolayout technique from the red controller:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-swift"}),"func setPreferredContentSizeFromAutolayout() {\n    self.preferredContentSize = self.view.systemLayoutSizeFitting(\n        UIView.layoutFittingCompressedSize\n    )\n}\n\nvar isExpanded: Bool = false {\n    didSet {\n        let constant = self.isExpanded ? 600 : 400\n        self.heightConstraint.constant = constant\n        self.setPreferredContentSizeFromAutolayout()\n    }\n}\n\n@objc private func didTap() {\n    self.isExpanded = !self.isExpanded\n}\n")),Object(o.b)("p",null,"But now we've got a new problem: the popover size doesn't animate!"),Object(o.b)(i.a,{max:500,filename:"popover-animation-3.gif",alt:"Green view controller updating height, but without animation.",caption:"We were expecting a smooth animation",mdxType:"CaptionedImage"}),Object(o.b)("h2",null,"Informing the presented view controller"),Object(o.b)("p",null,"The issue we have here is that our green view controller is changing its ",Object(o.b)("inlineCode",{parentName:"p"},"preferredContentSize"),", but ",Object(o.b)("em",{parentName:"p"},"the popover view controller doesn't know it changed"),". We'll use the same technique that we used for setting the popover view controller's content size when the green view initially appeared (using ",Object(o.b)("inlineCode",{parentName:"p"},"popoverPresentationController"),"):"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-swift"}),"func setPreferredContentSizeFromAutolayout() {\n    let contentSize = self.view.systemLayoutSizeFitting(\n        UIView.layoutFittingCompressedSize\n    )\n    self.preferredContentSize = contentSize\n    self.popoverPresentationController?\n        .presentedViewController\n        .preferredContentSize = contentSize\n}\n")),Object(o.b)("p",null,"Now our interaction finally works as expected!"),Object(o.b)(i.a,{max:500,filename:"popover-finished.gif",alt:"Finished presentation of UIViewControllers with different content sizes inside a popover",caption:"🎉🎉",mdxType:"CaptionedImage"}),Object(o.b)("h1",null,"Conclusion"),Object(o.b)("p",null,"Hopefully this was a helpful look into the world of ",Object(o.b)("inlineCode",{parentName:"p"},"preferredContentSize"),", view controller wrapping, and UIKit popovers. Here's a tl;dr:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"To define the size of your popover with autolayout, set ",Object(o.b)("inlineCode",{parentName:"li"},"preferredContentSize")," to the result of ",Object(o.b)("inlineCode",{parentName:"li"},"systemLayoutSizeFitting")),Object(o.b)("li",{parentName:"ol"},"To animate popover size updates at the same time as navigation controller animations, wrap your ",Object(o.b)("inlineCode",{parentName:"li"},"UINavigationController")," in a ",Object(o.b)("inlineCode",{parentName:"li"},"PopoverPushController")," (see code below)"),Object(o.b)("li",{parentName:"ol"},"When you change your controller's ",Object(o.b)("inlineCode",{parentName:"li"},"preferredContentSize"),", be sure to change the ",Object(o.b)("inlineCode",{parentName:"li"},"preferredContentSize")," of your controller's ",Object(o.b)("inlineCode",{parentName:"li"},"popoverPresentationController?.presentedViewController")," as well")),Object(o.b)("p",null,"Though this solution takes some time to explain, I think it ends up being pretty clean:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"No ",Object(o.b)("inlineCode",{parentName:"li"},"UINavigationController")," subclass 🎉"),Object(o.b)("li",{parentName:"ol"},"No need to implement ",Object(o.b)("inlineCode",{parentName:"li"},"UINavigationControllerDelegate")," - you can even modify ",Object(o.b)("inlineCode",{parentName:"li"},"PopoverPushController")," to accept your own navigation controller, along with your own delegate 😮"),Object(o.b)("li",{parentName:"ol"},"No need to set ",Object(o.b)("inlineCode",{parentName:"li"},"preferredContentSize")," except when the size actually changes ✅"),Object(o.b)("li",{parentName:"ol"},"If you make the width and height constraints have ",Object(o.b)("inlineCode",{parentName:"li"},"priority = .defaultHigh"),", no unsatisfiable constraint warnings clogging your logs 💪")),Object(o.b)("p",null,"With more plumbing, it's possible to implement the same interaction without having to call into ",Object(o.b)("inlineCode",{parentName:"p"},"self.popoverPresentationController")," - you can have a ",Object(o.b)("inlineCode",{parentName:"p"},"UINavigationController")," subclass implement ",Object(o.b)("inlineCode",{parentName:"p"},"preferredContentSizeWillChange"),", and have it set the navgation controller's content size, which will be intercepted by ",Object(o.b)("inlineCode",{parentName:"p"},"PopoverPushController"),"'s ",Object(o.b)("inlineCode",{parentName:"p"},"preferredContentSizeWillChange"),". You can also provide a ",Object(o.b)("inlineCode",{parentName:"p"},"UINavigationControllerDelegate")," to avoid setting the popover controller's content size in ",Object(o.b)("inlineCode",{parentName:"p"},"viewWillAppear"),"."),Object(o.b)("p",null,"Ultimately though, it's better to do whatever feels more workable for your use case. I prefer using the ",Object(o.b)("inlineCode",{parentName:"p"},"popoverPresentationController")," because it feels cleaner to me, but if you think differently, ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://twitter.com/noahsark769"}),"let me know"),"."),Object(o.b)("h2",null,"Code"),Object(o.b)("p",null,"All the code is available at NGPopoverForceResizeTest](",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/noahsark769/NGPopoverForceResizeTest"}),"https://github.com/noahsark769/NGPopoverForceResizeTest"),")."),Object(o.b)("p",null,"Here's the full implementation of the nav controller wrapper:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-swift"}),'final class PopoverPushController: UIViewController {\n    private let wrappedNavigationController: UINavigationController\n\n    init(rootViewController: UIViewController) {\n        self.wrappedNavigationController = UINavigationController(rootViewController: rootViewController)\n        super.init(nibName: nil, bundle: nil)\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError("init(coder:) has not been implemented")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        wrappedNavigationController.willMove(toParent: self)\n        self.addChild(wrappedNavigationController)\n        self.view.addSubview(wrappedNavigationController.view)\n    }\n}\n')))}p.isMDXComponent=!0},246:function(e,t,n){"use strict";n.d(t,"c",function(){return u}),n.d(t,"b",function(){return f}),n.d(t,"f",function(){return h}),n.d(t,"d",function(){return b}),n.d(t,"e",function(){return g}),n.d(t,"a",function(){return w});var o=n(10),a=n(249),i=n.n(a),r=n(250),l=n.n(r),s=n(251),p=n.n(s),c=n(252),d=n.n(c);function m(){var e=function(e,t){t||(t=e.slice(0));return e.raw=t,e}(["\n    @font-face {\n        font-family: 'Bariol';\n        src: url('","');\n        src: url('","?#iefix') format('embedded-opentype'),\n             url('","') format('woff'),\n             url('","') format('truetype'),\n             url('","#svgBariolRegular') format('svg');\n    }\n\n    * {\n        box-sizing: border-box !important;\n    }\n\n    body {\n        margin: 0;\n        padding: 0;\n    }\n"]);return m=function(){return e},e}var u=Object(o.a)(m(),i.a,i.a,l.a,p.a,d.a),f=o.c.div.withConfig({displayName:"default__Div",componentId:"d4l1a1-0"})([""]),h=(o.c.nav.withConfig({displayName:"default__Nav",componentId:"d4l1a1-1"})([""]),o.c.ul.withConfig({displayName:"default__UL",componentId:"d4l1a1-2"})(["margin:0;padding:0;"])),b=o.c.li.withConfig({displayName:"default__LI",componentId:"d4l1a1-3"})(["margin:0;padding:0;"]),g=o.c.p.withConfig({displayName:"default__P",componentId:"d4l1a1-4"})(["margin:0;padding:0;"]),w=o.c.a.withConfig({displayName:"default__A",componentId:"d4l1a1-5"})(["&,&:hover,&:focus{outline:none;color:inherit;text-decoration:none;}"])},247:function(e,t,n){"use strict";n.d(t,"a",function(){return o}),n.d(t,"b",function(){return a});var o="rgba(128, 165, 177, 1)",a="rgba(151, 195, 210, 1)"},249:function(e,t,n){e.exports=n.p+"static/Bariol-Regular-b0d07df351f442860551405a4be58de7.eot"},250:function(e,t,n){e.exports=n.p+"static/Bariol-Regular-4afd94f0fd93a1f63b46c6c6ad792f71.woff"},251:function(e,t,n){e.exports=n.p+"static/Bariol-Regular-8a7d23d53f8d118e190c63e4e81a91fe.ttf"},252:function(e,t,n){e.exports=n.p+"static/Bariol-Regular-75b90056f4cdf5a742897ec0a59569d7.svg"},253:function(e,t,n){"use strict";var o=n(0),a=n.n(o),i=n(246),r=n(247),l=n(10),s=n(257),p=n(258),c=l.c.nav.withConfig({displayName:"Nav__StyledNav",componentId:"sc-1cm9dpf-0"})(["display:flex;flex-direction:row;flex-wrap:wrap;padding:20px 60px;border-bottom:1px solid #ddd;@media all and (max-width:600px){padding:20px;}@media (prefers-color-scheme:dark){border-color:#777;}"]),d=l.c.div.withConfig({displayName:"Nav__Title",componentId:"sc-1cm9dpf-1"})(['flex:2;font-family:"Roboto","Helvetica Neue","Helvetica",sans-serif;font-size:28px;font-display:swap;@media (prefers-color-scheme:dark){color:#fff;}']),m=Object(l.c)(i.f).withConfig({displayName:"Nav__NavLinks",componentId:"sc-1cm9dpf-2"})(["flex:10;display:flex;flex-direction:horizontal;flex-wrap:wrap;justify-content:flex-end;height:100%;align-self:center;"]),u=Object(l.c)(i.d).withConfig({displayName:"Nav__NavLink",componentId:"sc-1cm9dpf-3"})(['display:flex;flex-direction:vertical;align-items:center;text-align:center;font-family:"Bariol","Helvetica Neue","Helvetica",sans-serif;font-size:16px;padding:0px 20px;']),f=Object(l.c)(i.a).withConfig({displayName:"Nav__StyledA",componentId:"sc-1cm9dpf-4"})(["height:auto;color:",";display:flex;flex-direction:vertical;align-items:center;-webkit-transition:0.2s ease-in-out;-moz-transition:0.2s ease-in-out;-o-transition:0.2s ease-in-out;transition:0.2s ease-in-out;&:hover{color:",";}"],r.a,r.b);t.a=function(e){return a.a.createElement(c,null,a.a.createElement(d,null,a.a.createElement(f,{href:e.blog?"/blog":"/"},"NOAH GILMORE")),a.a.createElement(m,null,a.a.createElement(u,null,a.a.createElement(f,{"aria-label":"Blog Home",href:"/blog"},a.a.createElement(s.b,{color:r.a,size:"24"}))),a.a.createElement(u,null,a.a.createElement(f,{"aria-label":"Twitter",href:"https://twitter.com/noahsark769"},a.a.createElement(p.a,{color:r.a,size:"24"}))),a.a.createElement(u,null,a.a.createElement(f,{"aria-label":"App Store",href:"https://appstore.com/trestle"},a.a.createElement(s.a,{color:r.a,size:"24"})))))}},254:function(e,t,n){"use strict";n.d(t,"a",function(){return l}),n.d(t,"b",function(){return d});var o=n(0),a=n.n(o),i=n(10),r=n(248);var l=i.c.div.withConfig({displayName:"BlogPost__BlogPostContainer",componentId:"gyfnna-0"})(["padding:60px 0;margin:0 auto;width:90%;@media all and (min-width:600px){max-width:700px;margin:auto;}@media all and (max-width:600px){width:100%;padding:20px 0;","}"],function(e){return e.darkened&&Object(i.b)(["background-color:#f6f6f6;@media (prefers-color-scheme:dark){background-color:inherit;}"])}),s=i.c.div.withConfig({displayName:"BlogPost__TitleContainer",componentId:"gyfnna-1"})(["width:100%;margin-bottom:40px;"]),p=i.c.h1.withConfig({displayName:"BlogPost__Heading",componentId:"gyfnna-2"})(['width:100%;font-family:"Roboto","Helvetica Neue","Helvetica",sans-serif;font-size:34px;margin-bottom:10px;line-height:1.2em;@media (prefers-color-scheme:dark){color:#fff;}']),c=i.c.p.withConfig({displayName:"BlogPost__DateContainer",componentId:"gyfnna-3"})(['font-family:"Gentium Book Basic",times,serif;font-style:italic;font-size:16px;color:#999;']),d=function(e){return a.a.createElement("div",null,a.a.createElement(r.Helmet,null,a.a.createElement("title",null,e.title)),a.a.createElement(s,null,a.a.createElement(p,null,e.title),a.a.createElement(c,null,e.date)))};a.a.Component},255:function(e,t,n){"use strict";n.d(t,"a",function(){return s});var o=n(0),a=n.n(o),i=n(50),r=n.n(i);var l=n(10).c.div.withConfig({displayName:"MarkdownContent__Container",componentId:"zl3v0s-0"})(['p,li{margin:0;padding:0;font-family:"Gentium Book Basic",times,serif;font-size:21px;line-height:29px;color:#333;padding-bottom:15px;margin-top:15px;@media all and (max-width:600px){width:90%;margin:15px auto 0 auto;}@media (prefers-color-scheme:dark){color:#fff;}}blockquote{background-color:#faf9f7;border-left:4px solid #e5e4e1;padding:20px;font-style:italic;@media (prefers-color-scheme:dark){background-color:#3f3f3f;}p{margin:0;padding:0;color:#555;@media (prefers-color-scheme:dark){color:#fff;}}}a{color:#1A3F4B;-webkit-transition:0.2s ease-in-out;-moz-transition:0.2s ease-in-out;-o-transition:0.2s ease-in-out;transition:0.2s ease-in-out;@media (prefers-color-scheme:dark){color:#60b5d1;}}a:hover{color:#47656E;@media (prefers-color-scheme:dark){color:#6bcfef;}}code{font-family:monospace;font-size:16px;background-color:#faf9f7;border:1px solid #e5e4e1;padding:3px 5px;margin:0px 2px;color:#555;@media (prefers-color-scheme:dark){color:#fff;background-color:#3f3f3f;}}code:not(pre code){font-family:monospace;font-size:16px;background-color:#faf9f7;border:1px solid #e5e4e1;padding:3px 5px;margin:0px 2px;color:#555;@media (prefers-color-scheme:dark){color:#fff;background-color:#3f3f3f;}}code:first-child{margin-left:0;}pre{display:block;margin:0;padding:0;background:none;@media all and (max-width:600px){width:100%;margin:0 auto;}}pre > code{display:block;margin:0;padding:0;border:1px solid #e5e4e1;border-radius:2px;padding:10px;margin-top:10px;font-family:monospace;font-size:14px;line-height:17px;white-space:pre-wrap;@media all and (max-width:600px){font-size:15px;white-space:pre;border-left:none;border-right:none;padding:15px 5% 15px 5%;width:100%;}}pre > code.language-nohighlight{@media (prefers-color-scheme:dark){color:#fff;background-color:#3f3f3f;}}pre + p{margin-top:30px;}ol{margin-left:30px;@media all and (max-width:600px){width:90%;margin:0 auto 0 30px;}@media (prefers-color-scheme:dark){color:#fff;}}ol li{list-style-type:decimal;}ul li{list-style-type:square;margin-left:40px;@media all and (max-width:600px){width:90%;margin:0 auto;}@media (prefers-color-scheme:dark){color:#fff;}}h1,h2,h3,h4,h5,h6{width:100%;font-family:"Roboto","Helvetica Neue","Helvetica",sans-serif;margin-bottom:10px;margin-top:40px;@media all and (max-width:600px){width:90%;margin:40px auto 10px auto;}@media (prefers-color-scheme:dark){color:#fff;}}h1{font-size:28px;}h2{font-size:24px;}h3{font-size:20px;}em{font-style:italic;}strong{font-weight:bold;}']),s=function(e){var t,n;function o(){return e.apply(this,arguments)||this}n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=o.prototype;return i.render=function(){return a.a.createElement(l,null,this.props.children)},i.componentDidMount=function(){for(var e=r.a.findDOMNode(this).querySelectorAll("pre code"),t=0;t<e.length;t++)window.hljs&&window.hljs.highlightBlock(e[t])},o}(a.a.Component)},256:function(e,t,n){"use strict";function o(e){return new Date(e).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"})}n.d(t,"a",function(){return o})},259:function(e,t,n){"use strict";n(157);var o=n(0),a=n.n(o),i=n(248),r=n(246),l=n(253),s=n(10),p=n(257),c=n(258),d=n(247);var m=s.c.div.withConfig({displayName:"EndButtons__Container",componentId:"sc-2ta1su-0"})(["width:100%;display:flex;flex-direction:horizontal;align-items:center;justify-content:center;margin-top:40px;"]),u=s.c.div.withConfig({displayName:"EndButtons__ButtonStyle",componentId:"sc-2ta1su-1"})(["background-color:",";-webkit-transition:0.2s ease-in-out;-moz-transition:0.2s ease-in-out;-o-transition:0.2s ease-in-out;transition:0.2s ease-in-out;&:hover{background-color:",";}width:100px;padding:10px 20px;text-align:center;display:flex;flex-direction:vertical;align-items:center;justify-content:center;border-radius:4px;",";"],d.a,d.b,function(e){return e.margin&&Object(s.b)(["margin-right:20px;"])}),f=function(e){return a.a.createElement(r.a,{href:e.url,target:e.newTab?"_blank":null,"aria-label":e.label},a.a.createElement(u,{margin:e.margin},e.children))},h=function(e){var t,n;function o(){return e.apply(this,arguments)||this}return n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,o.prototype.render=function(){var e,t=(e="Post by @noahsark769: "+this.props.tweetTitle+" "+this.props.tweetUrl,"https://twitter.com/intent/tweet?text="+encodeURIComponent(e));return a.a.createElement(m,null,a.a.createElement(f,{label:"Twitter",url:t,newTab:!0,margin:!0},a.a.createElement(c.a,{size:24,color:"white"})),a.a.createElement(f,{label:"Blog homepage",url:"/blog"},a.a.createElement(p.b,{size:24,color:"white"})))},o}(a.a.Component),b=n(254),g=n(255),w=n(256);var v=s.c.div.withConfig({displayName:"Disqus__Wrapper",componentId:"sc-1jjeqqj-0"})(["margin-top:80px;"]),C=function(e){var t,n;function o(){return e.apply(this,arguments)||this}n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=o.prototype;return i.render=function(){return a.a.createElement(v,null,a.a.createElement("div",{id:"disqus_thread"}))},i.componentDidMount=function(){var e,t;e=document,(t=e.createElement("script")).src="//noahgilmore-com.disqus.com/embed.js",t.setAttribute("data-timestamp",+new Date),(e.head||e.body).appendChild(t)},o}(a.a.Component),j=n(260),y=n.n(j);n.d(t,"a",function(){return x});var O=s.c.div.withConfig({displayName:"BlogPageLayout__Container",componentId:"sc-118ribu-0"})(["@media (prefers-color-scheme:dark){background-color:#2b2c2f;}"]),N=s.c.div.withConfig({displayName:"BlogPageLayout__NonContent",componentId:"sc-118ribu-1"})(["@media all and (max-width:600px){padding-right:5%;padding-left:5%;}"]),x=function(e){var t,n;function o(){return e.apply(this,arguments)||this}n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var s=o.prototype;return s.render=function(){var e="undefined"!=typeof window&&window.matchMedia("(prefers-color-scheme: dark)").matches;return a.a.createElement(O,null,a.a.createElement(r.c,null),a.a.createElement(i.Helmet,null,a.a.createElement("link",{href:"https://fonts.googleapis.com/css?family=Roboto:700",rel:"stylesheet",type:"text/css"}),a.a.createElement("link",{href:"https://fonts.googleapis.com/css?family=Gentium+Book+Basic",rel:"stylesheet"}),!e&&a.a.createElement("link",{rel:"stylesheet",href:"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.13.0/styles/atom-one-light.min.css"}),e&&a.a.createElement("link",{rel:"stylesheet",href:"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.13.0/styles/zenburn.min.css"}),a.a.createElement("meta",{name:"twitter:card",content:"summary"}),a.a.createElement("meta",{name:"twitter:creator",content:"@noahsark769"}),a.a.createElement("meta",{property:"og:url",content:"https://noahgilmore.com"+this.props.location.pathname}),a.a.createElement("meta",{property:"og:title",content:this.props.pageContext.frontmatter.title}),a.a.createElement("meta",{property:"og:description",content:this.props.pageContext.frontmatter.staticPreview}),a.a.createElement("meta",{name:"description",content:this.props.pageContext.frontmatter.staticPreview})),a.a.createElement(l.a,{blog:!0}),a.a.createElement(b.a,null,a.a.createElement(N,null,a.a.createElement(b.b,{title:this.props.pageContext.frontmatter.title,date:Object(w.a)(this.props.pageContext.frontmatter.date)})),a.a.createElement(g.a,null,this.props.children),a.a.createElement(N,null,a.a.createElement(h,{tweetTitle:this.props.pageContext.frontmatter.title,tweetUrl:"https://noahgilmore.com"+this.props.location.pathname}),a.a.createElement(C,null))))},s.componentDidMount=function(){y.a.initialize("UA-35325391-1"),y.a.pageview(window.location.pathname+window.location.search)},o}(a.a.Component)}}]);
//# sourceMappingURL=component---src-pages-blog-popover-uinavigationcontroller-preferredcontentsize-mdx-ca2fcdf1644204001dd1.js.map