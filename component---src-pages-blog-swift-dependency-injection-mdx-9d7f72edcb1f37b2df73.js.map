{"version":3,"sources":["webpack:///./src/pages/blog/swift-dependency-injection.mdx","webpack:///./src/components/CaptionedImage.jsx"],"names":["__webpack_exports__","_ref","components","props","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0___default","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_2__","name","Layout","DefaultLayout","layoutProps","parentName","href","className","metaString","_components_CaptionedImage__WEBPACK_IMPORTED_MODULE_4__","filename","alt","caption","_frontmatter","Container","styled","div","withConfig","displayName","componentId","Caption","CaptionedImage","render","_components_Image__WEBPACK_IMPORTED_MODULE_3__","this","React","Component"],"mappings":"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","file":"component---src-pages-blog-swift-dependency-injection-mdx-9d7f72edcb1f37b2df73.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/Users/noahgilmore/code/noahgilmore.com/src/components/BlogPageLayout.jsx\"\nimport CaptionedImage from '../../components/CaptionedImage';\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\" Layout={DefaultLayout} layoutProps={props} components={components}>\n\n\n<MDXTag name=\"p\" components={components}>{`At the most recent `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.meetup.com/swift-language/\"}}>{`Swift Language User Group`}</MDXTag>{` meetup, `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://twitter.com/patbarry\"}}>{`Patrick Barry`}</MDXTag>{` presented a `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.youtube.com/watch?v=dA9rGQRwHGs\"}}>{`great talk`}</MDXTag>{` about how Lyft implements dependency injection. I'd highly recommend watching the video - I was impressed by how clean and functional the solution they came up with is. I was going to write up a summary for my coworkers, but figured I might as well put it here for the benefit of anyone who's interested.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This post describes the very simple approach to dependency injection presented in the talk, using new functions `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`bind`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mock`}</MDXTag>{`. I'll paraphrase some code in this write up, but the concepts and function names will match the talk.`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Dependency Injection`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`I won't go into detail on what dependency injection is, since there's a fair amount of time in the talk dedicated to it. Instead, let's think about an example.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Say we're writing an app to display info about cats. We would have a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Cat`}</MDXTag>{` model in our app:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`struct Cat: Codable {\n    let name: String\n    let image: URL\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`And let's assume we have an API to fetch a cat by name:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"metaString\":null}}>{`GET /cat?id=2\n{\n    \"name\": \"Maggie\",\n    \"image\": \"https://placekitten.com/200/200\"\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`From an architectural point of view, we want to extract this into two different parts:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`A `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`NetworkService`}</MDXTag>{` which makes the requests`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`A `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`CatService`}</MDXTag>{` which exposes a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`getCat(id:)`}</MDXTag>{` method (this calls into the network service)`}</MDXTag>\n</MDXTag>\n<CaptionedImage filename=\"swift-di-1.png\" alt=\"Diagram of CatService calling NetworkService\" caption=\"\" />\n<MDXTag name=\"h2\" components={components}>{`Binding`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There's a clear `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"#seam\"}}>{`seam`}</MDXTag>{` between the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`NetworkService`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`CatService`}</MDXTag>{` that we can use to test `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`CatService`}</MDXTag>{`. Let's extract the network's functionality into an interface:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`protocol NetworkInterface {\n    func makeRequest(\n        url: URL,\n        completion: @escaping (Result<Data, Error>) -> Void\n    )\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`And the concrete implementation:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"metaString\":null}}>{`private class NetworkService: NetworkInterface {\n    func makeRequest(\n        url: URL,\n        completion: @escaping (Result<Data, Error>) -> Void\n    ) {\n        // Use URLSession, etc\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`And now for the really interesting part - `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`NetworkService`}</MDXTag>{` will `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`expose itself using a special function called bind`}</MDXTag>{` (I've added the \"SimpleDI\" namespace here):`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`let getNetwork = SimpleDI.bind(NetworkInterface.self) { NetworkService() }\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`bind`}</MDXTag>{` returns `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getNetwork`}</MDXTag>{` as a function which can be called to get a concrete implementation of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`NetworkInterface`}</MDXTag>{` protocol. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`CatService`}</MDXTag>{` can then call `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getNetwork`}</MDXTag>{` to get access to the network:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"metaString\":null}}>{`class CatService {\n    func getCat(id: Int, completion: @escaping (Result<Cat, Error>) -> Void) {\n        let network = getNetwork()\n        network.makeRequest(/* ... */)\n    }\n}\n`}</MDXTag></MDXTag>\n<CaptionedImage filename=\"swift-di-2.png\" alt=\"Diagram of CatService calling NetworkService, with bind as an intermediary\" caption=\"\" />\n<MDXTag name=\"h2\" components={components}>{`Implementation`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Before we talk about why `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`bind`}</MDXTag>{` is useful, let's discuss the implementation. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`bind`}</MDXTag>{` returns a function which takes no parameters and returns a type of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`NetworkInterface`}</MDXTag>{`, but it also takes a closure which will be used to generate the concrete implementation.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`bind`}</MDXTag>{`'s body looks like this (again, paraphrased a bit from the talk):`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`private var instantiators: [String: Any] = [:]\n\nenum SimpleDI {\n    static func bind<T>(\n        _ interfaceType: T.Type,\n        instantiator: @escaping () -> T\n    ) -> () -> T {\n        instantiators[String(describing: interfaceType)] = instantiator\n        return self.instance\n    }\n\n    private static func instance<T>() -> T {\n        let key = String(describing: T.self)\n        let instantiator = instantiators[key] as! () -> T\n        return instantiator()\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We take the closure that we're passed and save it in a dictionary (`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"#dictionary-atomic\"}}>{`see end note`}</MDXTag>{`), then return a function which accesses and calls the closure we provided. Though we have to do some force casting, we're guaranteed that the closure we need will be there when `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getNetworkInterface`}</MDXTag>{` is called, since we put it into `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`instantiators`}</MDXTag>{` before returning from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`bind`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Testability`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`bind`}</MDXTag>{` adds a level of indirection at the seam between `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`NetworkService`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`CatService`}</MDXTag>{`, which allows us to stub in a mock in tests. In order to do that, we need to define `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mock`}</MDXTag>{` as well, and add a bit of more infrastructure:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`private var instantiators: [String: Any] = [:]\nprivate var mockInstantiators: [String: Any] = [:]\n\nenum SimpleDI {\n    static var isTestEnvironment = false\n\n    static func bind<T>(\n        _ type: T.Type,\n        instantiator: @escaping () -> T\n    ) -> () -> T {\n        instantiators[String(describing: type)] = instantiator\n        return self.instance\n    }\n\n    private static func instance<T>() -> T {\n        let key = String(describing: T.self)\n        if self.isTestEnvironment {\n            guard let instantiator = mockInstantiators[key] as? () -> T else {\n                fatalError(\"Type \\\\(key) unmocked in test!\")\n            }\n            return instantiator()\n        }\n        let instantiator = instantiators[key] as! () -> T\n        return instantiator()\n    }\n\n    static func mock<T>(_ type: T.Type, instantiator: @escaping () -> T) {\n        mockInstantiators[String(describing: type)] = instantiator\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This code isn't very pretty - in fact, checks like `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`isTestEnvironment`}</MDXTag>{` are generally a code smell that mean you should refactor how the class works to avoid the check. However, this enables us to write tests very easily: all we have to do is set `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`isTestEnvironment = true`}</MDXTag>{`, and we'll be able to `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"#mock\"}}>{`stub in a mock`}</MDXTag>{` immediately using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mock`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Example`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Let's say we want to write a test which makes sure CatService reports an error when the underlying network errors:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"metaString\":null}}>{`class NetworkThatAlwaysErrors: NetworkInterface {\n    func makeRequest(url: URL, completion: @escaping (Result<Data>) -> Void) {\n        completion(.error(error: NSError(domain: \"\", code: 0, userInfo: nil)))\n    }\n}\n\nclass CatServiceTestCase: XCTestCase {\n    func testCatServiceReportsError() {\n        SimpleDI.isTestEnvironment = true\n        SimpleDI.mock(NetworkInterface.self) { NetworkThatAlwaysErrors() }\n\n        let expecation = self.expectation(description: \"Should return error\")\n        let service = CatService()\n        service.getCatImage(named: \"Maggie\", completion: { result in\n            if case .error = result {\n                expecation.fulfill()\n            }\n        })\n        self.waitForExpectations(timeout: 0.2)\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`bind`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mock`}</MDXTag>{` take the dirty work of setting up the DI/mocking infrastructure and hide it under the rug, allowing us to write more expressive tests easily.`}</MDXTag>\n<CaptionedImage filename=\"swift-di-3.png\" alt=\"Diagram of bind and mock being used to separate CatService and NetworkService and stub in a mock in tests\" caption=\"\" />\n<MDXTag name=\"p\" components={components}>{`Some interesting things to note:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Many people who've worked with DI have horror stories of passing 10/15+ dependencies into an initializer so they can be mocked in tests. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`bind`}</MDXTag>{` brings the argument count down to 0 without sacrificing testability, and makes both the service and the test more elegant.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`bind`}</MDXTag>{` will error if you forget to mock out an interface in a test, so you're never accidentally calling deeper into dependencies than you mean to.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Conclusion`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It was really interesting to see how Lyft was able to come up with such a simple solution to a complex problem. I'm hoping to implement this in personal projects and do some more thinking on what the pros and cons to this approach are. I'd really recommend watching `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.youtube.com/watch?v=dA9rGQRwHGs\"}}>{`the talk`}</MDXTag>{` if you're interested in dependency injection and testing. If you'd like to see a working example of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`bind`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mock`}</MDXTag>{`, I've put one `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/noahsark769/NGSimpleDIExample\"}}>{`here`}</MDXTag>{` (it has a few differences from the code in this post in order to demonstrate an actual working request and test).`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Footnotes`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\"><a name=\"dictionary-atomic\">\n</a>\n\n{`Dictionary is not thread safe, so if you want to use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`bind`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`mock`}</MDXTag>{` on multiple threads you'll need to implement something similar to an `}<MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://www.objc.io/blog/2018/12/18/atomic-variables/\"}}>{`atomic box`}</MDXTag>{` (the talk mentions this).`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\"><a name=\"seam\">\n</a>\n\n{`\"`}<MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"http://wiki.c2.com/?SoftwareSeam\"}}>{`Seam`}</MDXTag>{`\" is a concept that seems to have been first coined in `}<MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052\"}}>{`Working Effectively With Legacy Code`}</MDXTag>{`. It's defined as \"`}<MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://softwareengineering.stackexchange.com/questions/132563/problem-with-understanding-seam-word/311122\"}}>{`a place where two parts of the software meet and where something else can be injected`}</MDXTag>{`\".`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\"><a name=\"mock\">\n</a>\n\n{`You could even put `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`mock`}</MDXTag>{` in your test target to make sure it can't be called in production!`}</MDXTag>\n</MDXTag></MDXTag>\n\nexport const _frontmatter = {};\n\n  ","import React from 'react';\nimport styled from \"styled-components\";\nimport Image from \"../components/Image\";\n\nconst Container = styled.div`\n    margin: 20px 0;\n`;\n\nconst Caption = styled.div`\n    font-family: \"Gentium Book Basic\", times, serif;\n    font-style: italic;\n    font-size: 16px;\n    color: #999;\n    margin-bottom: 30px;\n\n    img {\n        width: 100%;\n        margin-bottom: 10px;   \n    }\n`;\n\nexport default class CaptionedImage extends React.Component {\n    render() {\n        return (\n            <Container>\n                <Image filename={this.props.filename} alt={this.props.alt} />\n                <Caption>{this.props.caption}</Caption>\n            </Container>\n        );\n    }\n};\n"],"sourceRoot":""}