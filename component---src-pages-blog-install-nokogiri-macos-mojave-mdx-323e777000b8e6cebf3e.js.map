{"version":3,"sources":["webpack:///./src/pages/blog/install-nokogiri-macos-mojave.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"gRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,2HAA0G,0BAAYC,WAAW,KAAvB,uBAA1G,QAAkL,0BAAYA,WAAW,KAAvB,0BAAlL,WAAgQ,0BAAYA,WAAW,KAAvB,eAAhQ,mDAA2W,0BAAYA,WAAW,KAAvB,kBAA3W,4CACA,uGAAsF,+BAAGA,WAAW,KAAQ,CACxG,KAAQ,gDAD0E,kBAAtF,qCAEiE,0BAAYA,WAAW,KAAvB,kBAFjE,kBAGA,kBAAS,CACP,UAAa,qCACb,gBAAiB,IAChB,kCAAMA,WAAW,OAAU,CAC1B,UAAa,0BACZ,kCAAMA,WAAW,QAAW,CAC3B,UAAa,0BADd,kMAIL,oBAAW,CACT,UAAa,2BADf,mFAYJJ,EAAWK,gBAAiB","file":"component---src-pages-blog-install-nokogiri-macos-mojave-mdx-323e777000b8e6cebf3e.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/noahgilmore.com/noahgilmore.com/src/components/BlogPageLayout.jsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Another MacOS and another struggle through installing nokogiri. Most places online recommend using `}<inlineCode parentName=\"p\">{`--with-xml2-include`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`--use-system-libraries`}</inlineCode>{` during `}<inlineCode parentName=\"p\">{`gem install`}</inlineCode>{`, but if you're installing from a Gemfile using `}<inlineCode parentName=\"p\">{`bundle install`}</inlineCode>{`, it can sometimes be a little trickier.`}</p>\n    <p>{`To enable passing args like this to a gem installed from a Gemfile, we can use `}<a parentName=\"p\" {...{\n        \"href\": \"https://bundler.io/v1.16/bundle_config.html\"\n      }}>{`Bundler Config`}</a>{`. The magic command to run before `}<inlineCode parentName=\"p\">{`bundle install`}</inlineCode>{` on Mojave is:`}</p>\n    <pre {...{\n      \"className\": \"dark-default-dark vscode-highlight\",\n      \"data-language\": \"\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}>{`bundle config build.nokogiri --with-xml2-include=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libxml2   --use-system-libraries`}</span></code></pre>\n\n    <style {...{\n      \"className\": \"vscode-highlight-styles\"\n    }}>{`\n  \n  .dark-default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n`}</style>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}