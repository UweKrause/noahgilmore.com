{"data":{"allMdx":{"edges":[{"node":{"parent":{"__typename":"File","name":"easy-gatsby-image-components","relativePath":"blog/easy-gatsby-image-components.mdx"},"frontmatter":{"title":"Easy Gatsby Image Components","date":"2018-11-02T00:00:00.000Z","mdxPreview":"I use [Gatsby](https://gatsbyjs.org) as a static site generator to build this blog using React. As part of this, I wanted a simple component to display a static image, something like this:\n```jsx <Image filename=\"myimage.png\" /> ```\nSurprisingly, this is hard to do in Gatsby. The default Image component generated by Gatsby uses `StaticQuery`:\n"}}},{"node":{"parent":{"__typename":"File","name":"userdefaults-set-nil","relativePath":"blog/userdefaults-set-nil.mdx"},"frontmatter":{"title":"Setting a UserDefaults value to nil","date":"2018-10-22T00:00:00.000Z","mdxPreview":"To clear a value from UserDefaults, I previously thought it was fine to do something like this:\n```swift UserDefaults.standard.set(nil, forKey: \"myKey\") ```\nTurns out that this works differently in different iOS versions. Starting in iOS 11, setting nil for a key works as I expected\n"}}},{"node":{"parent":{"__typename":"File","name":"nsobject-equatable","relativePath":"blog/nsobject-equatable.mdx"},"frontmatter":{"title":"NSObject Equality is Tricky","date":"2016-11-13T00:00:00.000Z","mdxPreview":"Swift can be tricky sometimes. For example, what does the following print?\n```swift class A: NSObject {\n  let x: Int\n\n  init(x: Int) {\n    self.x = x\n  }\n}\nfunc ==(left: A, right: A) -> Bool {\n  return left.x == right.x\n}\nprint(A(x: 1) == A(x: 1)) print([A(x: 1)] == [A(x: 1)]) ```\n"}}},{"node":{"parent":{"__typename":"File","name":"pyparsing-trees","relativePath":"blog/pyparsing-trees.mdx"},"frontmatter":{"title":"Syntax trees with Pyparsing","date":"2016-10-23T00:00:00.000Z","mdxPreview":"Let's talk about [syntax trees](https://en.wikipedia.org/wiki/Abstract_syntax_tree). In static analysis, a common operation is to take a character string (e.g. \"x = 1\") and transform it into well structured data:\n<CaptionedImage filename=\"pyparsing-trees-1.png\" alt=\"Simple syntax tree\" caption=\"This is a simple example of course.\" />\nLet's try to do this in python. We'll use [Pyparsing](http://pyparsing.wikispaces.com/) as our tokenization tool.\n"}}}]}}}