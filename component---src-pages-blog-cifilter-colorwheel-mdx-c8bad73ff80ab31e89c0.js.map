{"version":3,"sources":["webpack:///./src/pages/blog/cifilter-colorwheel.mdx","webpack:///./src/components/CaptionedImage.jsx"],"names":["__webpack_exports__","_ref","components","props","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0___default","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_2__","name","Layout","DefaultLayout","layoutProps","parentName","href","className","metaString","_components_CaptionedImage__WEBPACK_IMPORTED_MODULE_4__","filename","alt","caption","_frontmatter","Container","styled","div","withConfig","displayName","componentId","Caption","CaptionedImage","render","_components_Image__WEBPACK_IMPORTED_MODULE_3__","this","React","Component"],"mappings":"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","file":"component---src-pages-blog-cifilter-colorwheel-mdx-c8bad73ff80ab31e89c0.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/Users/noahgilmore/code/noahgilmore.com/src/components/BlogPageLayout.jsx\"\nimport CaptionedImage from '../../components/CaptionedImage';\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\" Layout={DefaultLayout} layoutProps={props} components={components}>\n\n\n<MDXTag name=\"p\" components={components}>{`After struggling for some time with `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://developer.apple.com/documentation/coreimage/cifilter\"}}>{`CIFilter`}</MDXTag>{` documentation at work, I've been `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://twitter.com/noahsark769/status/1080580341973348352\"}}>{`working on an app`}</MDXTag>{` which can apply filters interactively for various inputs (another blog post to come on this later). As part of this app, I needed a UI for the user to select a color, and decided to implement a color wheel.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There are several open source projects implementing color wheels on iOS, and StackOverflow has a `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://stackoverflow.com/questions/5108921/how-to-draw-a-color-wheel-in-objective-c\"}}>{`few answers`}</MDXTag>{` which mostly recommend drawing the color wheel image yourself by iterating over the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://en.wikipedia.org/wiki/HSL_and_HSV\"}}>{`Hue-Saturation-Lightness`}</MDXTag>{` color representation. However, I managed to find `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://www.chibicode.org/?p=62\"}}>{`this post`}</MDXTag>{` about new CIFilters in iOS 10, which included a description of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`CIHueSaturationValueGradient`}</MDXTag>{`, and realized we can use this filter to generate a color wheel much more easily.`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`CoreImage Has Color Wheels Built In`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The description of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`CIHueSaturationValueGradient`}</MDXTag>{` is \"Generates a color wheel that shows hues and saturations for a specified value\".`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For a given value of lightness (dark/light), this filter's output image will be a wheel of all the hues and saturations for that lightness in a given color space. Code that looks like this:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`let filter = CIFilter(name: \"CIHueSaturationValueGradient\", parameters: [\n    \"inputColorSpace\": CGColorSpaceCreateDeviceRGB(),\n    \"inputDither\": 0,\n    \"inputRadius\": 160,\n    \"inputSoftness\": 0,\n    \"inputValue\": 1\n])!\nlet image = UIImage(ciImage: filter.outputImage!)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`And the output image looks like this:`}</MDXTag>\n<CaptionedImage filename=\"cifilter-colorwheel-1.png\" alt=\"Color wheel\" caption=\"\" />\n<MDXTag name=\"h2\" components={components}>{`Details`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The filter takes four parameters:`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`inputColorSpace: This is a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`CGColorSpaceRef`}</MDXTag>{` representing the color space in which to generate the wheel. Generally, you're going to want to use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`CGColorSpaceCreateDeviceRGB()`}</MDXTag>{` for this, which will generate a wheel in the current device's color space.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`inputDither: The amount of `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://en.wikipedia.org/wiki/Dither\"}}>{`dither`}</MDXTag>{` to apply to the wheel. I'm not exactly sure what this is useful for, but it can be fun to play around with. I also don't really know the units of this value, but I think it's pixels (if you can confirm, `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://twitter.com/noahsark769\"}}>{`let me know`}</MDXTag>{`). For example, here's a color wheel with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`inputDither`}</MDXTag>{` as 300:`}</MDXTag>\n<CaptionedImage filename=\"cifilter-colorwheel-2.png\" alt=\"Color wheel with dither\" caption=\"\" />\n<MDXTag name=\"p\" components={components}>{`inputRadius: The value, `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`in points`}</MDXTag>{`, of the radius of the wheel. A radius of 160 creates an image which is 320x320 points square (640x640 pixels on a device with 2x screen scale).`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`inputSoftness: Specifies a softness value to smooth the gradient. A value of 0 means no smoothing, which is probably what you want for a color wheel. I'm also pretty sure the units here are pixels. Here's a color wheel with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`inputSoftness`}</MDXTag>{` as 4:`}</MDXTag>\n<CaptionedImage filename=\"cifilter-colorwheel-3.png\" alt=\"Color wheel\" caption=\"\" />\n<MDXTag name=\"p\" components={components}>{`inputValue: The lightness value. 0 creates a black wheel, 1 means full lightness. Here's a color wheel with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`inputValue`}</MDXTag>{` as 0.5:`}</MDXTag>\n<CaptionedImage filename=\"cifilter-colorwheel-4.png\" alt=\"Color wheel\" caption=\"\" />\n<MDXTag name=\"h2\" components={components}>{`Getting The Color On Touch`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`I still needed to actually let the user select a color from the color wheel. Turns out there are tons of people online talking about how to get the color at a given touch location for a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`UIImageView`}</MDXTag>{`. I ended up going with `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://stackoverflow.com/questions/12770181/how-to-get-the-pixel-color-on-touch\"}}>{`this one`}</MDXTag>{` which translated pretty well into an extension:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`extension UIImageView {\n    func getPixelColorAt(point: CGPoint) -> UIColor {\n        let pixel = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: 4)\n        let colorSpace = CGColorSpaceCreateDeviceRGB()\n        let bitmapInfo = CGBitmapInfo(rawValue: CGImageAlphaInfo.premultipliedLast.rawValue)\n        let context = CGContext(\n            data: pixel,\n            width: 1,\n            height: 1,\n            bitsPerComponent: 8,\n            bytesPerRow: 4,\n            space: colorSpace,\n            bitmapInfo: bitmapInfo.rawValue\n        )\n\n        context!.translateBy(x: -point.x, y: -point.y)\n        layer.render(in: context!)\n        let color = UIColor(\n            red: CGFloat(pixel[0]) / 255.0,\n            green: CGFloat(pixel[1]) / 255.0,\n            blue: CGFloat(pixel[2]) / 255.0,\n            alpha: CGFloat(pixel[3]) / 255.0\n        )\n\n        pixel.deallocate()\n        return color\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components}>{`End Result`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It ended up `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://twitter.com/noahsark769/status/1087511576871981056\"}}>{`working pretty well`}</MDXTag>{`! Adding a gesture recognizer to the imageView which calls `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getPixelColorAt(point:)`}</MDXTag>{` allows us to easily determine the color that the user picked and render a simple UI to show the selected color:`}</MDXTag>\n<CaptionedImage filename=\"cifilter-colorwheel-5.png\" alt=\"Color wheel\" caption=\"\" />\n<MDXTag name=\"p\" components={components}>{`All in all, this was a great exercise in figuring out the least complicated way to implement a complicated UI component, and I continue to learn about all the awesome stuff that CoreImage comes with out of the box (not just color wheels, but photo effects, blurs, distortions, etc).`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`More on CIFilters soon to come! 👋`}</MDXTag></MDXTag>\n\nexport const _frontmatter = {};\n\n  ","import React from 'react';\nimport styled from \"styled-components\";\nimport Image from \"../components/Image\";\n\nconst Container = styled.div`\n    margin: 20px 0;\n`;\n\nconst Caption = styled.div`\n    font-family: \"Gentium Book Basic\", times, serif;\n    font-style: italic;\n    font-size: 16px;\n    color: #999;\n    margin-bottom: 30px;\n\n    img {\n        width: 100%;\n        margin-bottom: 10px;   \n    }\n`;\n\nexport default class CaptionedImage extends React.Component {\n    render() {\n        return (\n            <Container>\n                <Image filename={this.props.filename} alt={this.props.alt} />\n                <Caption>{this.props.caption}</Caption>\n            </Container>\n        );\n    }\n};\n"],"sourceRoot":""}