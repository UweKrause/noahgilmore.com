{"version":3,"sources":["webpack:///./src/pages/blog/uiwindowscene-black-screen.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"gRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,gJAA+H,+BAAGC,WAAW,KAAQ,CACjJ,KAAQ,+EADmH,2BAA/H,uJAGA,yJAAwI,0BAAYA,WAAW,KAAvB,iBAAxI,wFACA,0FAAyE,0BAAYA,WAAW,KAAvB,YAAzE,mCACA,kBAAS,CACP,UAAa,qCACb,gBAAiB,SAChB,kCAAMA,WAAW,OAAU,CAC1B,UAAa,0BACZ,kCAAMA,WAAW,QAAW,CAC3B,UAAa,0BACZ,kCAAMA,WAAW,QAAW,CAC3B,UAAa,SADd,gCAJJ,KAOL,kCAAMA,WAAW,QAAW,CACpB,UAAa,0BACZ,kCAAMA,WAAW,QAAW,CAC3B,UAAa,SADd,aAEsB,kCAAMA,WAAW,QAAW,CACjD,UAAa,UADQ,YAED,kCAAMA,WAAW,QAAW,CAChD,UAAa,SADO,KAEP,kCAAMA,WAAW,QAAW,CACzC,UAAa,UADA,SAEI,kCAAMA,WAAW,QAAW,CAC7C,UAAa,SADI,eAEM,kCAAMA,WAAW,QAAW,CACnD,UAAa,UADU,QAEP,kCAAMA,WAAW,QAAW,CAC5C,UAAa,SADG,KAEH,kCAAMA,WAAW,QAAW,CACzC,UAAa,UADA,UAEK,kCAAMA,WAAW,QAAW,CAC9C,UAAa,SADK,QAG1B,oJAAmI,0BAAYA,WAAW,KAAvB,uCAAnI,YACA,kBAAS,CACP,UAAa,qCACb,gBAAiB,SAChB,kCAAMA,WAAW,OAAU,CAC1B,UAAa,0BACZ,kCAAMA,WAAW,QAAW,CAC3B,UAAa,0BACZ,kCAAMA,WAAW,QAAW,CAC3B,UAAa,SADd,aAEsB,kCAAMA,WAAW,QAAW,CACjD,UAAa,UADQ,YAED,kCAAMA,WAAW,QAAW,CAChD,UAAa,SADO,KAEP,kCAAMA,WAAW,QAAW,CACzC,UAAa,UADA,eAEU,kCAAMA,WAAW,QAAW,CACnD,UAAa,SADU,qBAG/B,0HAAyG,+BAAGA,WAAW,KAAQ,CAC3H,KAAQ,uHAD6F,6BAAzG,KAIA,oBAAW,CACT,UAAa,2BADf,wiCAiCJJ,EAAWK,gBAAiB","file":"component---src-pages-blog-uiwindowscene-black-screen-mdx-3ff84264403cb7ae2e6f.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/noahgilmore.com/noahgilmore.com/src/components/BlogPageLayout.jsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`I've encountered this bug enough times that I figured it was time to write a quick post about it. If you've looked into `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/app_and_environment/scenes\"\n      }}>{`multiple window support`}</a>{` for your app in iOS 13, you might know that a lot of the setup you used to have to do in the app delegate now lives in the scene delegate instead.`}</p>\n    <p>{`However, multiple times now, I've thought I've set everything up correctly (scene delegate class implemented, configuration with `}<inlineCode parentName=\"p\">{`delegateClass`}</inlineCode>{` set properly, correct Info.plist setup, etc), only to get a black screen on launch.`}</p>\n    <p>{`The secret is this: prior to iOS 13, it was common to set up your `}<inlineCode parentName=\"p\">{`UIWindow`}</inlineCode>{` with the bounds of the screen:`}</p>\n    <pre {...{\n      \"className\": \"dark-default-dark vscode-highlight\",\n      \"data-language\": \"swift\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk3\"\n          }}>{`// Does not work in iOS 13+`}</span></span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`window = `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`UIWindow`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`(`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`frame`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: UIScreen.`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk12\"\n          }}>{`main`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`.`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk12\"\n          }}>{`bounds`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`)`}</span></span></code></pre>\n    <p>{`This breaks when using the UISceneSession system. Instead, you have to initialize the window with the scene itself, in your `}<inlineCode parentName=\"p\">{`scene(scene:willConnectTo:options:)`}</inlineCode>{` method:`}</p>\n    <pre {...{\n      \"className\": \"dark-default-dark vscode-highlight\",\n      \"data-language\": \"swift\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"vscode-highlight-code\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"vscode-highlight-line\"\n        }}><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`window = `}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`UIWindow`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`(`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk11\"\n          }}>{`windowScene`}</span><span parentName=\"span\" {...{\n            \"className\": \"mtk1\"\n          }}>{`: windowScene)`}</span></span></code></pre>\n    <p>{`This has generally been the missing piece I forgot, and ends up resolving the black screen issue. `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/noahsark769/NGSystemColorComparison/blob/master/NGSystemColorComparison/SceneDelegate.swift#L24\"\n      }}>{`Here's a concrete example`}</a>{`.`}</p>\n\n    <style {...{\n      \"className\": \"vscode-highlight-styles\"\n    }}>{`\n  \n  .dark-default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.dark-default-dark .mtk1 { color: #D4D4D4; }\n.dark-default-dark .mtk2 { color: #1E1E1E; }\n.dark-default-dark .mtk3 { color: #6A9955; }\n.dark-default-dark .mtk4 { color: #569CD6; }\n.dark-default-dark .mtk5 { color: #D16969; }\n.dark-default-dark .mtk6 { color: #D7BA7D; }\n.dark-default-dark .mtk7 { color: #B5CEA8; }\n.dark-default-dark .mtk8 { color: #CE9178; }\n.dark-default-dark .mtk9 { color: #646695; }\n.dark-default-dark .mtk10 { color: #4EC9B0; }\n.dark-default-dark .mtk11 { color: #DCDCAA; }\n.dark-default-dark .mtk12 { color: #9CDCFE; }\n.dark-default-dark .mtk13 { color: #000080; }\n.dark-default-dark .mtk14 { color: #F44747; }\n.dark-default-dark .mtk15 { color: #C586C0; }\n.dark-default-dark .mtk16 { color: #6796E6; }\n.dark-default-dark .mtk17 { color: #808080; }\n.dark-default-dark .mtki { font-style: italic; }\n.dark-default-dark .mtkb { font-weight: bold; }\n.dark-default-dark .mtku { text-decoration: underline; text-underline-position: under; }\n`}</style>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}