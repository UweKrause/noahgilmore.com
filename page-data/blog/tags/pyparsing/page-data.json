{"componentChunkName":"component---src-templates-mdx-blog-posts-jsx","path":"/blog/tags/pyparsing/","webpackCompilationHash":"ed02d89d6887a18edb5c","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"edges":[{"node":{"parent":{"name":"pyparsing-trees","relativePath":"blog/pyparsing-trees.mdx"},"id":"4424b17b-6c9a-5638-a408-c9ede4506c5c","frontmatter":{"title":"Syntax trees with Pyparsing","date":"2016-10-23T00:00:00.000Z","mdxPreview":"Let's talk about [syntax trees](https://en.wikipedia.org/wiki/Abstract_syntax_tree). In static analysis, a common operation is to take a character string (e.g. \"x = 1\") and transform it into well structured data.\nLet's try to do this in python. We'll use [Pyparsing](http://pyparsing.wikispaces.com/) as our tokenization tool.\n","tags":"programming, python, pyparsing"}}}],"tag":"pyparsing"}}}