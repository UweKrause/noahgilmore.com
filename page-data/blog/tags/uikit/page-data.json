{"componentChunkName":"component---src-templates-mdx-blog-posts-template-jsx","path":"/blog/tags/uikit/","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"edges":[{"node":{"parent":{"name":"swiftui-self-sizing-cells","relativePath":"blog/swiftui-self-sizing-cells.mdx"},"id":"979b4b06-497c-5b67-b5af-ee1545fb8d2a","frontmatter":{"title":"Self-Sizing UITableView Cells with SwiftUI","date":"2020-07-21T00:00:00.000Z","mdxPreview":"It's been a year since SwiftUI was released, and many iOS developers who are lucky to only support the two most current iOS versions will soon be able to start writing SwiftUI in their production apps. There are clear benefits to using SwiftUI (I could probably devote a whole post to them), so the question I've been thinking about is: where to start?\n","tags":"swift, ios, uikit, swiftui"}}},{"node":{"parent":{"name":"color-compatibility-pod","relativePath":"blog/color-compatibility-pod.mdx"},"id":"cc313f00-7e8b-5947-b987-dd5ee774c8da","frontmatter":{"title":"ColorCompatibility Library","date":"2019-10-05T00:00:00.000Z","mdxPreview":"I [wrote previously](/blog/dark-mode-uicolor-compatibility) about a technique I use in [Trestle](https://itunes.apple.com/us/app/trestle-the-new-sudoku/id1300230302?mt=8) and [CIFilter.io](https://itunes.apple.com/us/app/cifilter-io/id1457458557?mt=8) to support iOS 12 and lower while still using system provided, dark-mode accessible colors...\n","tags":"ios, swift, uikit, apple"}}},{"node":{"parent":{"name":"uiwindowscene-black-screen","relativePath":"blog/uiwindowscene-black-screen.mdx"},"id":"8ad62ee7-45bc-59ce-810b-98806d343f39","frontmatter":{"title":"iOS 13 UIWindowScene Black Screen","date":"2019-09-21T00:00:00.000Z","mdxPreview":"I've encountered this bug enough times that I figured it was time to write a quick post about it. If you've looked into [multiple window support](https://developer.apple.com/documentation/uikit/app_and_environment/scenes) for your app in iOS 13, you might know that a lot of the setup you used to have to do in the app delegate now lives in the scene delegate instead...\n","tags":"ios, swift, uikit, apple"}}},{"node":{"parent":{"name":"uibutton-padding","relativePath":"blog/uibutton-padding.mdx"},"id":"853bedf7-015c-51b4-8dd5-6ff73d43d014","frontmatter":{"title":"UIButton: Padding Between Image and Text","date":"2019-05-06T00:00:00.000Z","mdxPreview":"Pop quiz: in a `UIButton`, how do you set a padding of 10pt between the image and the title? I had to do this at work recently, and I was surprised at how hard it was to reason about. There are several posts talking about this topic (including [this one](https://medium.com/short-swift-stories/using-uiedgeinsets-to-layout-a-uibutton-44ba04dd085c) which uses edge insets to flip the title and image!), but the answer for my use case was pretty hard to find...\n","tags":"ios, swift, uikit, uibutton, apple"}}}],"tag":"uikit"}}}