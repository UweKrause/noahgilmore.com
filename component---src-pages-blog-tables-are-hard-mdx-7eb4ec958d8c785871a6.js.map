{"version":3,"sources":["webpack:///./src/pages/blog/tables-are-hard.mdx"],"names":["__webpack_exports__","_ref","components","props","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0___default","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_2__","name","Layout","DefaultLayout","layoutProps","parentName","className","metaString","href","_frontmatter"],"mappings":"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","file":"component---src-pages-blog-tables-are-hard-mdx-7eb4ec958d8c785871a6.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/Users/noahgilmore/code/noahgilmore.com/src/components/BlogPageLayout.jsx\"\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\" Layout={DefaultLayout} layoutProps={props} components={components}>\n\n<MDXTag name=\"p\" components={components}>{`Let’s talk about HTML tables.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Here’s some code:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-html\",\"metaString\":\"\"}}>{`<table class=\"main\">\n  <colgroup><col class=\"votes\"><col></colgroup>\n  <tr>\n    <td>Votes</td>\n    <td>Comments</td>\n  </tr>\n  <tr>\n    <td>\n      <p class=\"vote-desc\">Some long name, really long, like really super long</p>\n      <p class=\"vote-desc\">Another long name, really long</p>\n    </td>\n    <td>\n      <p class=\"comment\">A really, really, really, really, really really really really really, really long comment.</p>\n    </td>\n  </tr>\n</table>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`In this table, there are two main data cells: one with two vote descriptions and one with a comment. Assuming the outside of the table has a constrained width, what will be the widths of the two inner data cells? `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://jsfiddle.net/R3AKT/1/\"}}>{`Check out this jsfiddle`}</MDXTag>{`. Now, `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://jsfiddle.net/8vzRb/1/\"}}>{`check it out with a longer comment`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`When I came across this situation in a project I was working on, I expected the left column to set its own width based on the width of its content, and for the subsequent columns to do the same with the remaining space. But no! In chrome and firefox, the left cell is all squished up, but the crazier thing is that chrome and firefox `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`squish it up differently`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Non-normativity`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It turns out that this part of the HTML specification is actually non-normative. It’s called the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.w3.org/TR/CSS21/tables.html#auto-table-layout\"}}>{`automatic table layout algorithm`}</MDXTag>{`. Basically, this applies to tables (elements with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`display: table`}</MDXTag>{` or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`display: inline-table`}</MDXTag>{`) with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`table-layout: auto`}</MDXTag>{`. `}{`[See end note.]`}{` From the spec:`}</MDXTag>\n<MDXTag name=\"blockquote\" components={components}>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`\"UAs are not required to implement this algorithm to determine the table layout in the case that ‘table-layout’ is ‘auto’; they can use any other algorithm even if it results in different behavior.\"\"`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`So, this is what really happens: the browser doesn’t know what to do when there are two columns that have to have automatically distributed width, so it makes its own decision.`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`What to do?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In order to control the actual width of columns in a table, we have a couple of options. Since, according to the spec, setting `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`table-layout: auto`}</MDXTag>{` can have unpredictable results, we should use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`table-layout: fixed`}</MDXTag>{` if we’re not sure of the length of the content that will occupy the table cells.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In this case, the browser will try to determine the width of the columns first by the widths of the column elements, second by the width of the cells in the first row of the column, and third by distributing total table width, if it is set, equally among columns (note that if it is not set, then the automatic table algorithm from above will be used, in some cases `}{`[see end note]`}{`). This is called the fixed table layout algorithm.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://jsfiddle.net/8vzRb/7/\"}}>{`Here’s an example`}</MDXTag>{`: much better!`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`End note`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The specification is a little shaky on what kind of algorithms should be used when for table width. Steps go like this, for a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`table`}</MDXTag>{` or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`inline-table`}</MDXTag>{` element:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`If the table has `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`table-layout: auto`}</MDXTag>{`, use the non-normative auto algorithm.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`If the table has `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`table-layout: fixed`}</MDXTag>{` and has a width set, then use the normative fixed algorithm (aka, distribute equally) based on that width.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`If the table has table-layout: fixed but does not have a width set, then what to do depends on whether the element is a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`table`}</MDXTag>{` or an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`inline-table`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"ol\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`If the latter, use the auto algorithm.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`If the former, `}<MDXTag name=\"strong\" components={components} parentName=\"li\">{`either`}</MDXTag>{` use the auto algorithm, `}<MDXTag name=\"strong\" components={components} parentName=\"li\">{`or`}</MDXTag>{` calculate the total width of the table based on the normal block flow, `}<MDXTag name=\"strong\" components={components} parentName=\"li\">{`then`}</MDXTag>{` use the fixed algorithm based on that width.`}</MDXTag>\n</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`That is, the widths could still be non-normative if you use a fixed layout table with an automatic width. Maybe.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Tables are hard, guys.`}</MDXTag></MDXTag>\n\nexport const _frontmatter = {};\n\n  "],"sourceRoot":""}