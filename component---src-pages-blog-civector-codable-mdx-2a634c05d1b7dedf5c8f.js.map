{"version":3,"sources":["webpack:///./src/pages/blog/civector-codable.mdx"],"names":["__webpack_exports__","_ref","components","props","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0___default","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_2__","name","Layout","DefaultLayout","layoutProps","parentName","href","className","metaString","_frontmatter"],"mappings":"qMAMAA,EAAA,iBAAeC,GAAA,IAAEC,EAAFD,EAAEC,WAAeC,EAAjBC,IAAAH,EAAA,uBAA4BI,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,UAAUC,OAAQC,IAAeC,YAAaT,EAAOD,WAAYA,GAEzHG,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIP,WAAYA,GAA7B,kBAA4DG,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIP,WAAYA,EAAYW,WAAW,IAAIV,MAAO,CAACW,KAAO,+DAAvE,gBAA5D,4IAAwWT,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaP,WAAYA,EAAYW,WAAW,KAA7D,WAAxW,KAAmcR,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaP,WAAYA,EAAYW,WAAW,KAA7D,WAAnc,6CAAskBR,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaP,WAAYA,EAAYW,WAAW,KAA7D,YAAtkB,kDAA+sBR,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaP,WAAYA,EAAYW,WAAW,KAA7D,YAA/sB,kBACAR,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIP,WAAYA,GAA7B,qEAA+GG,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaP,WAAYA,EAAYW,WAAW,KAA7D,YAA/G,KACAR,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,MAAMP,WAAYA,GAAYG,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,OAAOP,WAAYA,EAAYW,WAAW,MAAMV,MAAO,CAACY,UAAY,iBAAiBC,WAAa,KAA/G,qnBAsB3CX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIP,WAAYA,GAAYG,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaP,WAAYA,EAAYW,WAAW,KAA7D,YAAzC,wDAAwLR,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaP,WAAYA,EAAYW,WAAW,KAA7D,WAAxL,oFAAkWR,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaP,WAAYA,EAAYW,WAAW,KAA7D,eAAlW,4CAEO,IAAMI,EAAe","file":"component---src-pages-blog-civector-codable-mdx-2a634c05d1b7dedf5c8f.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/Users/noahgilmore/code/noahgilmore.com/src/components/BlogPageLayout.jsx\"\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\" Layout={DefaultLayout} layoutProps={props} components={components}>\n\n<MDXTag name=\"p\" components={components}>{`For my current `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://twitter.com/noahsark769/status/1102318232025718785\"}}>{`side project`}</MDXTag>{`, I have to export CIFilter parameters to json, and I've been running into issues with various CoreImage types not conforming to Swift's `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Codable`}</MDXTag>{`. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`CIColor`}</MDXTag>{` is easy enough to encode and decode, but `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`CIVector`}</MDXTag>{` (which represents an arbitrary length list of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`CGFloats`}</MDXTag>{`) is trickier.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Thought I'd share a wrapper type which I use to encode and decode `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`CIVector`}</MDXTag>{`:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`struct CIVectorCodableWrapper {\n    let vector: CIVector\n}\n\nextension CIVectorCodableWrapper: Codable {\n    public init(from decoder: Decoder) throws {\n        var container = try decoder.unkeyedContainer()\n        var floats: [CGFloat] = []\n        while !container.isAtEnd {\n            floats.append(try container.decode(CGFloat.self))\n        }\n        vector = CIVector(floats: floats)\n    }\n\n    func encode(to encoder: Encoder) throws {\n        var container = encoder.unkeyedContainer()\n        for i in 0..<vector.count {\n            try container.encode(vector.value(at: i))\n        }\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`CIVector`}</MDXTag>{` is semantically an \"unkeyed container\" type, so the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Codable`}</MDXTag>{` implementation encodes the vector's floats to an unkeyed coding container (with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`JSONEncoder`}</MDXTag>{`, for example, this becomes an array).`}</MDXTag></MDXTag>\n\nexport const _frontmatter = {};\n\n  "],"sourceRoot":""}