(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{xwSU:function(a,e,t){"use strict";t.r(e),t.d(e,"_frontmatter",(function(){return c})),t.d(e,"default",(function(){return r}));t("rGqo"),t("yt8O"),t("Btvt"),t("RW0V"),t("91GP"),t("q1tI");var s=t("E/Ix"),n=t("1zrH");var c={},b={_frontmatter:c},m=n.a;function r(a){var e=a.components,t=function(a,e){if(null==a)return{};var t,s,n={},c=Object.keys(a);for(s=0;s<c.length;s++)t=c[s],e.indexOf(t)>=0||(n[t]=a[t]);return n}(a,["components"]);return Object(s.b)(m,Object.assign({},b,t,{components:e,mdxType:"MDXLayout"}),Object(s.b)("p",null,"I'm writing a ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://twitter.com/noahsark769/status/1137425513402658816?s=20"}),"Mac App")," which includes an ",Object(s.b)("inlineCode",{parentName:"p"},"NSTextView"),". One of the things I found difficult to discover online is how to respond to when the user presses shift-tab while editing in the text view - I wanted to intercept this event to de-indent a list item."),Object(s.b)("p",null,'Turns out this is called a "backtab" and ',Object(s.b)("inlineCode",{parentName:"p"},"NSTextView")," has a built in way for consumers to respond to it, as part of ",Object(s.b)("inlineCode",{parentName:"p"},"NSTextViewDelegate"),". You implement the ",Object(s.b)("inlineCode",{parentName:"p"},"doCommandBy")," function and check for ",Object(s.b)("inlineCode",{parentName:"p"},"#selector(insertBacktab(_:))")),Object(s.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":"swift"},Object(s.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"extension"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"MyViewController"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": NSTextViewDelegate {")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"func"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"textView"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"(")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"_"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"textView"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": NSTextView,")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"doCommandBy"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"commandSelector"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": Selector")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    ) -> "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"Bool"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," {")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"if"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," commandSelector == "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"#selector"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"("),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"insertBacktab"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"(_:)) {")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"            "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"print"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"("),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk8"}),'"Handling the backtab!"'),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),")")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"            "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"return"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"true")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        }")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"return"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"false")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    }")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"}")))),Object(s.b)("p",null,"Note: we return true to indicate that the event was handled, which prevents any other default behavior. We need to return false otherwise, since we still want other commands (like inserting newlines) to work correctly."),Object(s.b)("style",{className:"vscode-highlight-styles"},"\n  \n  .dark-default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.dark-default-dark .mtk1 { color: #D4D4D4; }\n.dark-default-dark .mtk2 { color: #1E1E1E; }\n.dark-default-dark .mtk3 { color: #6A9955; }\n.dark-default-dark .mtk4 { color: #569CD6; }\n.dark-default-dark .mtk5 { color: #D16969; }\n.dark-default-dark .mtk6 { color: #D7BA7D; }\n.dark-default-dark .mtk7 { color: #B5CEA8; }\n.dark-default-dark .mtk8 { color: #CE9178; }\n.dark-default-dark .mtk9 { color: #646695; }\n.dark-default-dark .mtk10 { color: #4EC9B0; }\n.dark-default-dark .mtk11 { color: #DCDCAA; }\n.dark-default-dark .mtk12 { color: #9CDCFE; }\n.dark-default-dark .mtk13 { color: #000080; }\n.dark-default-dark .mtk14 { color: #F44747; }\n.dark-default-dark .mtk15 { color: #C586C0; }\n.dark-default-dark .mtk16 { color: #6796E6; }\n.dark-default-dark .mtk17 { color: #808080; }\n.dark-default-dark .mtki { font-style: italic; }\n.dark-default-dark .mtkb { font-weight: bold; }\n.dark-default-dark .mtku { text-decoration: underline; text-underline-position: under; }\n"))}r.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-blog-nstextview-shift-tab-mdx-c6d6a5313f8188cc819a.js.map