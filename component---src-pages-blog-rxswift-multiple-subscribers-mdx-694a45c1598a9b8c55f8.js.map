{"version":3,"sources":["webpack:///./src/pages/blog/rxswift-multiple-subscribers.mdx"],"names":["__webpack_exports__","_ref","components","props","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0___default","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_2__","name","Layout","DefaultLayout","layoutProps","parentName","href","className","metaString","_frontmatter"],"mappings":"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","file":"component---src-pages-blog-rxswift-multiple-subscribers-mdx-694a45c1598a9b8c55f8.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/Users/noahgilmore/code/noahgilmore.com/src/components/BlogPageLayout.jsx\"\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\" Layout={DefaultLayout} layoutProps={props} components={components}>\n\n<MDXTag name=\"p\" components={components}>{`Or, \"how to not make unnecessary requests with a URLSession subscriber\".`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`I've been working on a side project for `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://twitter.com/noahsark769/status/1066878101907419137\"}}>{`better CIFilter documentation`}</MDXTag>{` lately, and I decided this was as good of a time as any to try out `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/ReactiveX/RxSwift\"}}>{`RxSwift`}</MDXTag>{`. Even though reactive programming is becoming more and more common in native app development, I've never had a chance to really dig into it, so I started by going through RxSwift's `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/ReactiveX/RxSwift/blob/master/Documentation/GettingStarted.md\"}}>{`intro documentation`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Multiple Subscribers`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`One thing that wasn't immediately intuitive to me about Observables is that any time `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`subscribe`}</MDXTag>{` is called, the observable's creation block gets called again, even for Observables which perform asynchronous work. Take a simple observable that generates integers as an example:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`func generateRandomIntAfterDelay() -> Observable<Int> {\n    return Observable.create { observer in\n        print(\"Processing request...\")\n        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 2) {\n            print(\"Generating random int...\")\n            observer.onNext(Int.random(in: 0 ..< 10))\n            observer.onCompleted()\n        }\n        return Disposables.create()\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you have multiple subscribers to this observable, that means multiple units of work will get enqueued, and multiple random ints will get returned. I.e., if our subscription code looks like this:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`let observable = generateRandomIntAfterDelay()\nobservable.subscribe(onNext: { randInt in\n    print(\"1: Got \\\\(randInt)\")\n})\nobservable.subscribe(onNext: { randInt in\n    print(\"2: Got \\\\(randInt)\")\n})\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Then the output will look like this:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-nohighlight\",\"metaString\":\"\"}}>{`Processing request...\nProcessing request...\nGenerating random int...\n1: Got 7\nGenerating random int...\n2: Got 2\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`For some reason, I assumed that for async observables, two subscriptions would result in two outputs, but for the same async result - this is just not how observable subscriptions work.`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Observable URLSession Tasks`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This situation gets a little trickier when you have an observable which performs real work, like making http requests:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`extension Reactive where Base: URLSession {\n    public func response(urlString: String) -> Observable<Data> {\n        return Observable.create { observer in\n            let task = self.base.dataTask(\n                with: URLRequest(url: URL(string: urlString)!)\n            ) { (data, response, error) in\n                guard let data = data else {\n                    return\n                }\n                observer.onNext(data)\n                observer.onCompleted()\n            }\n            task.resume()\n            return Disposables.create {\n                task.cancel()\n            }\n        }\n    }\n}\n\nfunc makeRequest() {\n    let observable = URLSession.shared.rx.response(\n        urlString: \"https://noahgilmore.com\"\n    )\n    observable.subscribe(onNext: { data in\n        print(\"Got the data!\")\n    })\n    observable.subscribe(onNext: { data in\n        print(\"Got the data again!\")\n    })\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`One call to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`makeRequest()`}</MDXTag>{` will make `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`two`}</MDXTag>{` HTTP requests and get back two separate data objects. I started to wonder about how you would correctly implement multiple subscribers for a single HTTP request - it turns out an easy way is to use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ConnectableObservable`}</MDXTag>{`, an \"observable sequence that shares a single subscription to the underlying sequence\"`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/ReactiveX/RxSwift/blob/53cd723d40d05177e790c8c34c36cec7092a6106/RxSwift/Observables/Multicast.swift#L54\"}}>{`[1]`}</MDXTag>{`. Calling `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`publish()`}</MDXTag>{` on any observable returns a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ConnectableObservable`}</MDXTag>{` which mirrors it, and you can start the sequence with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.connect()`}</MDXTag>{`. This means you can implement multiple subscriptions for a single unit of work like this:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`func makeRequest() {\n    let observable = URLSession.shared.rx.response(\n        urlString: \"https://noahgilmore.com\"\n    )\n    let connectableObservable = observable.publish()\n    connectableObservable.subscribe(onNext: { data in\n        print(\"Got the data!\")\n    })\n    connectableObservable.subscribe(onNext: { data in\n        print(\"Got the data again!\")\n    })\n\n    // Start the request\n    connectableObservable.connect()\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This code correctly only makes one HTTP request with two callbacks. 👌`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This isn't the only time `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.publish()`}</MDXTag>{` is useful though - like `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://stackoverflow.com/questions/40052529/in-rxjs-5-is-there-a-way-to-trigger-an-observable-before-subscribing-to-it?rq=1\"}}>{`asked in this Stackoverflow`}</MDXTag>{`, you sometimes want to kick off a long-running piece of work before you actually subscribe to an observable. For example:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-swift\",\"metaString\":\"\"}}>{`func longRunningTask() -> Observable<Result> {\n    return Observable.create { observer in\n        doSomeLongRunningWork { result in\n            observer.onNext(result)\n            observer.onCompleted()\n        }\n    }\n}\n\nfunc startTask() {\n    let connectable = longRunningTask().publish()\n    connectable.connect() // start the task\n\n    // Do more setup...\n\n    connectable.subscribe(onNext: { result in\n        // process the result\n    })\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Hopefully this helps explain an unintuitive concept for others who are starting out with reactive programming. If you know a better way or a best practice to do this sort of thing, `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://twitter.com/noahsark769\"}}>{`let me know`}</MDXTag>{`! For reference, I've implemented these examples on `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/noahsark769/RxSwift-practice/blob/ca092d91791e40a98980607c0d72caa774d1a509/rxswift-practice/Tests.swift#L85\"}}>{`Github`}</MDXTag>{`.`}</MDXTag></MDXTag>\n\nexport const _frontmatter = {};\n\n  "],"sourceRoot":""}