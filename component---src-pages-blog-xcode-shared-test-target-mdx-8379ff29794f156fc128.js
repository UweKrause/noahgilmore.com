(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{jtma:function(e,a,t){"use strict";t.r(a),t.d(a,"_frontmatter",(function(){return b})),t.d(a,"default",(function(){return r}));t("rGqo"),t("yt8O"),t("Btvt"),t("RW0V"),t("91GP"),t("q1tI");var s=t("E/Ix"),n=t("1zrH"),c=(t("oty6"),t("Qjvx")),i=t("D+Sk");var b={},p={_frontmatter:b},l=n.a;function r(e){var a=e.components,t=function(e,a){if(null==e)return{};var t,s,n={},c=Object.keys(e);for(s=0;s<c.length;s++)t=c[s],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,["components"]);return Object(s.b)(l,Object.assign({},p,t,{components:a,mdxType:"MDXLayout"}),Object(s.b)("p",null,"I've been talking a fair amount recently about how I've been writing a lot of unit tests for ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://getfluency.io"}),"Fluency, my Confluence editor app"),", and how much I value having good tests to catch regressions and verify that the editor is actually working correctly. In the case of Fluency, I now have 70+ tests which test various parts of the app, and I've extracted various utils out of the actual ",Object(s.b)("inlineCode",{parentName:"p"},"XCTestCase"),"s into functions like ",Object(s.b)("inlineCode",{parentName:"p"},"assertRoundTrip(xml:)"),", which takes in ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://confluence.atlassian.com/doc/confluence-storage-format-790796544.html"}),"Confluence Storage Format")," XML, renders it to an ",Object(s.b)("inlineCode",{parentName:"p"},"NSAttributedString"),", reads it back, and asserts that the resulting xml is the same as what was passed in - a crucial test when you want to make sure your editor isn't going to break any page storage just by saving."),Object(s.b)(c.a,{filename:"xcodeshared-1.png",max:300,caption:"",alt:"Xcode UI showing RoundTripRenderingTest from Fluency in the test navigator",mdxType:"CaptionedImage"}),Object(s.b)("p",null,"Today, I took the next step by writing some more complicated tests: I wanted to sample 100+ valid Confluence pages from various places on the web and ",Object(s.b)("inlineCode",{parentName:"p"},"assertRoundTrip"),' on them, to give myself a reasonable amount of confidence that my editor could handle "real world" inputs. Some of these pages were quite large, and as a result the tests would take a long time to run, so I opted to put them in a separate test target so that I could run all the "unit" tests separately from the "integration" tests.'),Object(s.b)("p",null,"This all seemed fine, but I ran into a road block - ",Object(s.b)("inlineCode",{parentName:"p"},"assertRoundTrip")," had been declared in my original test target, so it wasn't available in the new one. After struggling for a few hours, I was finally  (with some help) able to figure out a way to extract my test utils into a shared library, but it wasn't at all straightforward. In this post I'll describe the method I used so that you can implement the same thing if it works for your project."),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"The sample code for this article is available at ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/noahsark769/NGSharedTestUtilsTargetExample"}),"NGSharedTestUtilsTargetExample"),". If you're just interested in a list of steps to create the shared library, skip to ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"/blog/xcode-shared-test-target#tldr"}),"here"),".")),Object(s.b)("h2",{id:"background-and-goal"},"Background and Goal"),Object(s.b)("p",null,"Let's assume a fairly standard setup for iOS app development: we have an app called ",Object(s.b)("inlineCode",{parentName:"p"},"ExampleApp"),', and if we checked the "Include Unit Tests" checkbox when we created it in Xcode, we have a unit test target called ',Object(s.b)("inlineCode",{parentName:"p"},"ExampleAppTests"),". For purposes of example, let's say we have a container type in our app:"),Object(s.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":"swift"},Object(s.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"struct"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"Container"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," {")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"let"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," value1: "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"String")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"let"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," value2: "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"String")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"}")))),Object(s.b)("p",null,"And in our tests, we've defined a util to test it (",Object(s.b)("inlineCode",{parentName:"p"},"assertContainerWorks")," is less complicated than ",Object(s.b)("inlineCode",{parentName:"p"},"assertRoundTrip"),", but the same idea):"),Object(s.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":"swift"},Object(s.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk3"}),"// ExampleAppTests.swift")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"import"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"XCTest")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"@testable"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"import"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"ExampleApp")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}))),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"func"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"assertContainerWorks"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"() {")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"let"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," container = "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"Container"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"("),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"value1"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk8"}),'"abc"'),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),", "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"value2"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk8"}),'"abc"'),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),")")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"XCTAssertEqual"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"(container."),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"value1"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),", container."),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"value2"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),")")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"}")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}))),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"class"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"ExampleAppTests"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": XCTestCase {")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"func"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"testExample"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"() "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"throws"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," {")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"assertContainerWorks"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"()")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    }")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"}")))),Object(s.b)("p",null,'Now, we want to add another test target which uses the same util. Right-clicking ExampleAppTests in the text navigator and choosing "New Unit Test Target" gets us that target, which we can call ',Object(s.b)("inlineCode",{parentName:"p"},"OtherTests"),":"),Object(s.b)(c.a,{filename:"xcodeshared-2.png",max:400,caption:"",alt:"Xcode UI with 'New Unit Test' menu item selected",mdxType:"CaptionedImage"}),Object(s.b)("p",null,"Our ",Object(s.b)("inlineCode",{parentName:"p"},"OtherTests.swift")," looks like:"),Object(s.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":"swift"},Object(s.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"import"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"XCTest")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"@testable"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"import"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"ExampleApp")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}))),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"class"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"OtherTests"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": XCTestCase {")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"func"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"testExample"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"() "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"throws"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," {")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"assertContainerWorks"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"()")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    }")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"}")))),Object(s.b)("p",null,"But the issue is that this doesn't compile, since ",Object(s.b)("inlineCode",{parentName:"p"},"assertContainerWorks")," is defined in ",Object(s.b)("inlineCode",{parentName:"p"},"ExampleAppTests"),", not ",Object(s.b)("inlineCode",{parentName:"p"},"OtherTests"),"."),Object(s.b)("p",null,"Our goal is to extract ",Object(s.b)("inlineCode",{parentName:"p"},"assertContainerWorks")," into a shared library (we'll call it ",Object(s.b)("inlineCode",{parentName:"p"},"SharedTestUtils"),") such that:"),Object(s.b)("ol",null,Object(s.b)("li",{parentName:"ol"},"Both test targets should be able to import it and use ",Object(s.b)("inlineCode",{parentName:"li"},"assertContainerWorks")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("inlineCode",{parentName:"li"},"SharedTestUtils")," itself should be able to use types from ",Object(s.b)("inlineCode",{parentName:"li"},"ExampleApp")," (i.e. it should be able to ",Object(s.b)("inlineCode",{parentName:"li"},"@testable import ExampleApp"),")")),Object(s.b)("h2",{id:"creating-a-static-library"},"Creating a Static Library"),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"If you'd like to practice this part or compare it to your own local Xcode setup, ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/noahsark769/NGSharedTestUtilsTargetExample/commit/d8fb23b14168561000189a71533e79747ade16f3"}),"this commit")," is the starting point before the shared library has been created.")),Object(s.b)("p",null,"The way we'll approach this is to create ",Object(s.b)("inlineCode",{parentName:"p"},"SharedTestUtils")," as a static library (for more on why we need a static library as opposed to another kind of library, see the next section). The first step is to create the new target:"),Object(s.b)(i.a,{columns:2,mdxType:"FlowGrid"},Object(s.b)(c.a,{max:300,filename:"xcodeshared-3.png",alt:"Xcode menu showing the 'New Target' option selected",caption:"New Target",mdxType:"CaptionedImage"}),Object(s.b)(c.a,{max:300,filename:"xcodeshared-4.png",alt:"Xcode menu showing the 'Static Library' option selected",caption:"Static library",mdxType:"CaptionedImage"})),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"SharedTestUtils.swift")," gets created automatically - we can fill it in with our util (and since it's now in another module, it has to be ",Object(s.b)("inlineCode",{parentName:"p"},"public"),"):"),Object(s.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":"swift"},Object(s.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk3"}),"// SharedTestUtils.swift")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"import"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"XCTest")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"@testable"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"import"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"ExampleApp")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}))),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"public"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"func"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"assertContainerWorks"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"() {")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"let"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," container = "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"Container"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"("),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"value1"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk8"}),'"abc"'),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),", "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"value2"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk8"}),'"abc"'),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),")")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"XCTAssertEqual"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"(container."),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"value1"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),", container."),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"value2"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),")")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"}")))),Object(s.b)("p",null,"Now let's go to work by telling Xcode to run the tests:"),Object(s.b)(c.a,{filename:"xcodeshared-5.png",max:400,caption:"",alt:"Xcode UI with the 'Run example app tests' menu item selected",mdxType:"CaptionedImage"}),Object(s.b)("h2",{id:"compiling-the-shared-library"},"Compiling the shared library"),Object(s.b)("p",null,"(This section goes into detail about how to triage and resolve each issue I ran into - I'm hoping this is helpful for folks who, like me, weren't experienced at building and linking static libraries. If you're looking for a laundry list of what to do to make it work, skip to ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"/blog/xcode-shared-test-target#tldr"}),"here"),".)"),Object(s.b)("h3",{id:"clean-and-run-1"},"Clean and run #1:"),Object(s.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":""},Object(s.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"Use of unresolved identifier 'assertContainerWorks'"))),Object(s.b)("p",null,"Makes sense - now that we have ",Object(s.b)("inlineCode",{parentName:"p"},"assertContainerWorks")," in a separate library, we need to import the library's Swift module. ",Object(s.b)("inlineCode",{parentName:"p"},"import SharedTestUtils")," works, so our tests now look like this:"),Object(s.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":"swift"},Object(s.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"import"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"XCTest")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"@testable"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"import"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"ExampleApp")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"import"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"SharedTestUtils")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}))),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"class"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"ExampleAppTests"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": XCTestCase {")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"func"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"testExample"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"() "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"throws"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," {")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"assertContainerWorks"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"()")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    }")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"}")))),Object(s.b)("h3",{id:"clean-and-run-2"},"Clean and run #2:"),Object(s.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":""},Object(s.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"No such module 'SharedTestUtils'"))),Object(s.b)("p",null,"We haven't told Xcode that our test targets depend on ",Object(s.b)("inlineCode",{parentName:"p"},"SharedTestUtils")," being built, so it hasn't built it for us. We'll need to add ",Object(s.b)("inlineCode",{parentName:"p"},"SharedTestUtils")," as a dependency in the Xcode project settings (Build Phrases section) for both test targets:"),Object(s.b)(i.a,{columns:2,mdxType:"FlowGrid"},Object(s.b)(c.a,{max:300,filename:"xcodeshared-6.png",alt:"Xcode menu showing the plus button in the dependencies menu",caption:"New Dependency",mdxType:"CaptionedImage"}),Object(s.b)(c.a,{max:300,filename:"xcodeshared-7.png",alt:"Xcode menu showing the 'SharedTestUtils' library being selected as a dependency",caption:"SharedTestUtils",mdxType:"CaptionedImage"})),Object(s.b)("h3",{id:"clean-and-run-3"},"Clean and run #3:"),Object(s.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":""},Object(s.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"Command CompileSwift failed with a nonzero exit code"))),Object(s.b)("p",null,"This one is a little harder: looking at the build log in the report navigator, we see the real error: ",Object(s.b)("inlineCode",{parentName:"p"},"Failed to load module 'XCTest'"),"."),Object(s.b)(c.a,{filename:"xcodeshared-8.png",max:600,caption:"",alt:"Xcode build output screen showing the failure message",mdxType:"CaptionedImage"}),Object(s.b)("p",null,"This is because we haven't linked the ",Object(s.b)("inlineCode",{parentName:"p"},"SharedTestUtils")," library against ",Object(s.b)("inlineCode",{parentName:"p"},"XCTest"),". We'll need to go to the project settings for ",Object(s.b)("inlineCode",{parentName:"p"},"SharedTestUtils"),", Build Phases, Link Binary With Libraries and select ",Object(s.b)("inlineCode",{parentName:"p"},"XCTest")," from the sheet."),Object(s.b)(i.a,{columns:2,mdxType:"FlowGrid"},Object(s.b)(c.a,{max:300,filename:"xcodeshared-9.png",alt:"Xcode menu showing the plus button in linking menu",caption:"Linking Menu",mdxType:"CaptionedImage"}),Object(s.b)(c.a,{max:300,filename:"xcodeshared-10.png",alt:"Xcode menu showing the 'XCTest' library being selected for linking",caption:"Selecting XCTest",mdxType:"CaptionedImage"})),Object(s.b)("h3",{id:"clean-and-run-4"},"Clean and run #4:"),Object(s.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":""},Object(s.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"No such module 'ExampleApp'"))),Object(s.b)("p",null,"We haven't specified that the ",Object(s.b)("inlineCode",{parentName:"p"},"ExampleApp")," target is a dependency of ",Object(s.b)("inlineCode",{parentName:"p"},"SharedTestUtils"),", so we'll need to add that via Xcode settings as well."),Object(s.b)(i.a,{columns:2,mdxType:"FlowGrid"},Object(s.b)(c.a,{max:300,filename:"xcodeshared-11.png",alt:"Xcode menu showing the plus button in the dependencies menu for SharedTestUtils",caption:"",mdxType:"CaptionedImage"}),Object(s.b)(c.a,{max:300,filename:"xcodeshared-12.png",alt:"Xcode menu showing the 'XCTest' library being selected for linking",caption:"",mdxType:"CaptionedImage"})),Object(s.b)("h3",{id:"clean-and-run-5"},"Clean and run #5:"),Object(s.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":""},Object(s.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"Undefined symbol: SharedTestUtils.assertContainerWorks() -> ()"))),Object(s.b)("p",null,"We've gotten past the compiler errors and we're now on to linker errors. ",Object(s.b)("inlineCode",{parentName:"p"},"SharedTestUtils")," got compiled, but our test targets aren't linking against it, so the linker doesn't know where to find the executable code for ",Object(s.b)("inlineCode",{parentName:"p"},"assertContainerWorks"),'. This can be solved in Xcode project settings too - under "Link Binary with Libraries" for both test targets, we\'ll add ',Object(s.b)("inlineCode",{parentName:"p"},"libSharedTestUtils.a"),", the static library artifact that results from compiling ",Object(s.b)("inlineCode",{parentName:"p"},"SharedTestUtils"),"."),Object(s.b)(i.a,{columns:2,mdxType:"FlowGrid"},Object(s.b)(c.a,{max:300,filename:"xcodeshared-13.png",alt:"Xcode menu showing the plus button in the linking menu for the test target",caption:"Adding a library to link against",mdxType:"CaptionedImage"}),Object(s.b)(c.a,{max:300,filename:"xcodeshared-14.png",alt:"Xcode menu showing the 'libSharedTestUtils.a' library being selected for linking",caption:"libSharedTestUtils.a",mdxType:"CaptionedImage"})),Object(s.b)("h3",{id:"clean-and-run-6"},"Clean and run #6:"),Object(s.b)("p",null,"It works!"),Object(s.b)(c.a,{max:400,filename:"xcodeshared-15.png",alt:"Xcode test run UI showing tests passing",caption:"🎉",mdxType:"CaptionedImage"}),Object(s.b)("h2",{id:"tldr"},"tl;dr:"),Object(s.b)("p",null,"In order to create a library that depends on app code and is shared between two test targets, you need to:"),Object(s.b)("ol",null,Object(s.b)("li",{parentName:"ol"},"Create the library as a Static Library target"),Object(s.b)("li",{parentName:"ol"},"Link the library with XCTest"),Object(s.b)("li",{parentName:"ol"},"Add your app target as a dependency of the library target"),Object(s.b)("li",{parentName:"ol"},"Add the library target as a dependency as all test targets and link all test targets with the ",Object(s.b)("inlineCode",{parentName:"li"},".a")," binary"),Object(s.b)("li",{parentName:"ol"},"Import the library into your tests")),Object(s.b)("h2",{id:"other-options-considered"},"Other Options Considered"),Object(s.b)("p",null,"A static library is only one way to include code in a dependency. I also tried using a Unit Test Bundle, but ran into linker issues - the test targets can't link against ",Object(s.b)("inlineCode",{parentName:"p"},"SharedTestUtils")," if it's a Unit Test Bundle, or at least not easily - Xcode doesn't show it in the Link Binary With Libraries setting."),Object(s.b)("p",null,"Using a dynamic library (wrapped in a Framework target) is also an option, and it might work well if your utils library just needs ",Object(s.b)("inlineCode",{parentName:"p"},"XCTest")," and doesn't need to ",Object(s.b)("inlineCode",{parentName:"p"},"@testable import")," your app. However, this is subject to the same issue as a Unit Test Bundle, where you can't link against the app binary. Thanks to ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://twitter.com/NeoNacho/status/1292203466362773505"}),"Boris Bügling for pointing out")," that you can get around this with ",Object(s.b)("inlineCode",{parentName:"p"},"BUNDLE_LOADER"),", but it turns out if you specify the loader app correctly you end up with the following:"),Object(s.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":""},Object(s.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"'-bundle_loader <path/to/ExampleApp> not allowed with '-dynamiclib'"))),Object(s.b)("p",null,"Apparently ",Object(s.b)("inlineCode",{parentName:"p"},"BUNDLE_LOADER")," doesn't work with dynamic libraries, which is why I went with the static library approach in the first place. To be honest, I'm not sure if this is the best way - there could be something I'm totally missing that might allow this to work with a Framework. Please ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://twitter.com/noahsark769"}),"let me know")," if you have ideas 👋"),Object(s.b)("h2",{id:"conclusion"},"Conclusion"),Object(s.b)("p",null,"Hopefully this approach helps folks who want to maintain multiple unit test targets while keeping shared app test utils in common between them. It's worked great in ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://getfluency.io"}),"Fluency"),", but your mileage might vary - if you're interested in discussing this or other Xcode/Swift/iOS related things, you can ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://twitter.com/noahsark769"}),"follow me on Twitter"),"."),Object(s.b)("style",{className:"vscode-highlight-styles"},"\n  \n  .dark-default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.dark-default-dark .mtk1 { color: #D4D4D4; }\n.dark-default-dark .mtk2 { color: #1E1E1E; }\n.dark-default-dark .mtk3 { color: #6A9955; }\n.dark-default-dark .mtk4 { color: #569CD6; }\n.dark-default-dark .mtk5 { color: #D16969; }\n.dark-default-dark .mtk6 { color: #D7BA7D; }\n.dark-default-dark .mtk7 { color: #B5CEA8; }\n.dark-default-dark .mtk8 { color: #CE9178; }\n.dark-default-dark .mtk9 { color: #646695; }\n.dark-default-dark .mtk10 { color: #4EC9B0; }\n.dark-default-dark .mtk11 { color: #DCDCAA; }\n.dark-default-dark .mtk12 { color: #9CDCFE; }\n.dark-default-dark .mtk13 { color: #000080; }\n.dark-default-dark .mtk14 { color: #F44747; }\n.dark-default-dark .mtk15 { color: #C586C0; }\n.dark-default-dark .mtk16 { color: #6796E6; }\n.dark-default-dark .mtk17 { color: #808080; }\n.dark-default-dark .mtki { font-style: italic; }\n.dark-default-dark .mtkb { font-weight: bold; }\n.dark-default-dark .mtku { text-decoration: underline; text-underline-position: under; }\n"))}r.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-blog-xcode-shared-test-target-mdx-8379ff29794f156fc128.js.map