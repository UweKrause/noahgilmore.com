(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{"3Kb+":function(e,a,t){"use strict";t.r(a),t.d(a,"_frontmatter",(function(){return c})),t.d(a,"default",(function(){return m}));t("rGqo"),t("yt8O"),t("Btvt"),t("RW0V"),t("91GP"),t("q1tI");var s=t("E/Ix"),n=t("1zrH");var c={},p={_frontmatter:c},b=n.a;function m(e){var a=e.components,t=function(e,a){if(null==e)return{};var t,s,n={},c=Object.keys(e);for(s=0;s<c.length;s++)t=c[s],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,["components"]);return Object(s.b)(b,Object.assign({},p,t,{components:a,mdxType:"MDXLayout"}),Object(s.b)("p",null,"I recently got a bug report for ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://apps.apple.com/app/apple-store/id1533210346?pt=118551115&ct=uibpbp&mt=8"}),"Transparent App Icons"),' to the effect of "I tried to paste in a transparent image, but it didn\'t work." After cropping the background to create a "transparent" image users can use for their Shortcuts icons, the app allows the user to paste an image from the clipboard to overlay and create a semi-transparent icon - this user was trying to paste a WebP image.'),Object(s.b)("p",null,"Turns out, ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://developers.google.com/speed/webp"}),"WebP"),", the web-optimized image format developed by Google, isn't supported natively by UIKit, but it's not too hard to implement support for it with the help of a small library and some deeper UIKit APIs."),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"Looking for a ",Object(s.b)("inlineCode",{parentName:"p"},"UIPasteboard")," extension which loads WebP images? Skip to the bottom!")),Object(s.b)("h1",{id:"uipasteboard-data"},"UIPasteboard data"),Object(s.b)("p",null,"I haven't had to use the more complicated parts of ",Object(s.b)("inlineCode",{parentName:"p"},"UIPasteboard")," very much in my time as an iOS developer - in ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://apps.apple.com/app/apple-store/id1533210346?pt=118551115&ct=uibpbp&mt=8"}),"Transparent App Icons"),", I was just checking ",Object(s.b)("inlineCode",{parentName:"p"},"UIPasteboard.general.image")," in order to figure out whether there was an image copied. In iOS 14, you can copy a WebP image no problem, but there's no ",Object(s.b)("inlineCode",{parentName:"p"},"UIImage")," initializer representation for it, and as such it doesn't get reported as a ",Object(s.b)("inlineCode",{parentName:"p"},"UIImage")," in the same way it would if you had copied a PNG."),Object(s.b)("p",null,"Luckily, there's a higher-effort, higher-reward way to interact with ",Object(s.b)("inlineCode",{parentName:"p"},"UIPasteboard"),". When the user copies data, the app it copied from might choose to write multiple ",Object(s.b)("em",{parentName:"p"},"representations")," of the data to the pasteboard - for example, if I'm writing an HTML editor and the user copies part of the document, I could write both HTML and string repreesentations to the pasteboard. Then, an app like notes doesn't have to worry about the HTML representation, it can just read the string value."),Object(s.b)("p",null,"Each representation of an object in the pasteboard is denoted by a type, usually a ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://developer.apple.com/documentation/uniformtypeidentifiers/uttype/system_declared_types"}),"Uniform Type Identifier"),". We can request the raw data for a pasteboard item using ",Object(s.b)("inlineCode",{parentName:"p"},"UIPasteboard"),"'s' ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://developer.apple.com/documentation/uikit/uipasteboard/1622093-data"}),Object(s.b)("inlineCode",{parentName:"a"},"data(forPasteboardType:)"))," method, and since iOS 14 there's even a more strongly typed way, using ",Object(s.b)("inlineCode",{parentName:"p"},"UTType")," - ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://developer.apple.com/documentation/uniformtypeidentifiers/uttype/3551599-webp"}),"here's the ",Object(s.b)("inlineCode",{parentName:"a"},"UTType")," identifier for WebP"),"."),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"Note: When I was trying to figure this out, I first tried using ",Object(s.b)("inlineCode",{parentName:"p"},"loadItem")," on the pasteboard's ",Object(s.b)("inlineCode",{parentName:"p"},"itemProviders"),", but this returns a ",Object(s.b)("inlineCode",{parentName:"p"},"URL")," that you can't read the data of since it's restricted (annoyingly, only on device will you get permission denied errors - this URL is perfectly readable on simulator). I then moved on to ",Object(s.b)("inlineCode",{parentName:"p"},"loadData"),", before realizing I could just use ",Object(s.b)("inlineCode",{parentName:"p"},"data(forPasteboardType:)")," directly.")),Object(s.b)("h1",{id:"parsing-webp"},"Parsing WebP"),Object(s.b)("p",null,"Once we have the data, we'll need to convert it into a ",Object(s.b)("inlineCode",{parentName:"p"},"UIImage")," - ",Object(s.b)("inlineCode",{parentName:"p"},"UIImage")," doesn't support this out of the box, but luckily ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://twitter.com/mattt"}),"Mattt")," has a ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/mattt/WebPImageSerialization"}),"great little library")," for encoding/decoding ",Object(s.b)("inlineCode",{parentName:"p"},"UIImage"),"s with WebP. Taking that with our data representation, we can write an extension to load a WebP image if one exists:"),Object(s.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":"swift"},Object(s.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"extension"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"UIPasteboard"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," {")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"func"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"loadImage"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"() -> UIImage? {")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"if"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"self"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"."),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"types"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"."),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"contains"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"(UTType."),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"webP"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"."),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"identifier"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"),")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"           "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"let"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," provider = "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"self"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"."),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"itemProviders"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"."),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"first"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),",")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"           "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"self"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"."),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"image"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," == "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"nil"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),",")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"           "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"let"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," data = "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"self"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"."),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"data"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"("),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"forPasteboardType"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": UTType."),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"webP"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"."),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"identifier"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),") {")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"            "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"do"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," {")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"                "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"let"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," webpImage = "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"try"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," WebPImageSerialization."),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"image"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"("),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"with"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": data)")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"                "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"return"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," webpImage")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"            } "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"catch"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," {")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"                "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk3"}),"// Log error")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"                "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"return"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"nil")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"            }")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        }")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"return"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," UIPasteboard."),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"general"),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"."),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"image")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    }")),"\n",Object(s.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(s.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"}")))),Object(s.b)("p",null,"This ended up working great, and Transparent App Icons will support WebP in the coming version."),Object(s.b)("style",{className:"vscode-highlight-styles"},"\n  \n  .dark-default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.dark-default-dark .mtk1 { color: #D4D4D4; }\n.dark-default-dark .mtk2 { color: #1E1E1E; }\n.dark-default-dark .mtk3 { color: #6A9955; }\n.dark-default-dark .mtk4 { color: #569CD6; }\n.dark-default-dark .mtk5 { color: #D16969; }\n.dark-default-dark .mtk6 { color: #D7BA7D; }\n.dark-default-dark .mtk7 { color: #B5CEA8; }\n.dark-default-dark .mtk8 { color: #CE9178; }\n.dark-default-dark .mtk9 { color: #646695; }\n.dark-default-dark .mtk10 { color: #4EC9B0; }\n.dark-default-dark .mtk11 { color: #DCDCAA; }\n.dark-default-dark .mtk12 { color: #9CDCFE; }\n.dark-default-dark .mtk13 { color: #000080; }\n.dark-default-dark .mtk14 { color: #F44747; }\n.dark-default-dark .mtk15 { color: #C586C0; }\n.dark-default-dark .mtk16 { color: #6796E6; }\n.dark-default-dark .mtk17 { color: #808080; }\n.dark-default-dark .mtki { font-style: italic; }\n.dark-default-dark .mtkb { font-weight: bold; }\n.dark-default-dark .mtku { text-decoration: underline; text-underline-position: under; }\n"))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-blog-uipasteboard-webp-mdx-b61fbb8e543ee0095e23.js.map