(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{253:function(e,a,t){"use strict";t.r(a),t.d(a,"_frontmatter",function(){return i}),t.d(a,"default",function(){return m});t(9),t(10),t(5),t(13),t(22),t(0);var n=t(84),s=t(273),c=t(18);var i={},p={_frontmatter:i},r=s.a;function m(e){var a=e.components,t=function(e,a){if(null==e)return{};var t,n,s={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,["components"]);return Object(n.b)(r,Object.assign({},p,t,{components:a,mdxType:"MDXLayout"}),Object(n.b)("p",null,"At the most recent ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"https://www.meetup.com/swift-language/"}),"Swift Language User Group")," meetup, ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"https://twitter.com/patbarry"}),"Patrick Barry")," presented a ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"https://www.youtube.com/watch?v=dA9rGQRwHGs"}),"great talk")," about how Lyft implements dependency injection. I'd highly recommend watching the video - I was impressed by how clean and functional the solution they came up with is. I was going to write up a summary for my coworkers, but figured I might as well put it here for the benefit of anyone who's interested."),Object(n.b)("p",null,"This post describes the very simple approach to dependency injection presented in the talk, using new functions ",Object(n.b)("inlineCode",{parentName:"p"},"bind")," and ",Object(n.b)("inlineCode",{parentName:"p"},"mock"),". I'll paraphrase some code in this write up, but the concepts and function names will match the talk."),Object(n.b)("p",null,Object(n.b)("em",{parentName:"p"},"Edit (4/30/2019): This post describes a nice Swift implementation of a pattern similar to the ",Object(n.b)("a",Object.assign({parentName:"em"},{href:"https://en.wikipedia.org/wiki/Service_locator_pattern"}),"Service Locator Pattern"),", considered by many to be a strong anti-pattern. Like Singletons, you should use Service Locator carefully - I've added a ",Object(n.b)("a",Object.assign({parentName:"em"},{href:"#downsides"}),"section")," at the end about drawbacks of this approach.")),Object(n.b)("h2",null,"Dependency Injection"),Object(n.b)("p",null,"I won't go into detail on what dependency injection is, since there's a fair amount of time in the talk dedicated to it. Instead, let's think about an example."),Object(n.b)("p",null,"Say we're writing an app to display info about cats. We would have a ",Object(n.b)("inlineCode",{parentName:"p"},"Cat")," model in our app:"),Object(n.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":"swift"},Object(n.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"struct"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"Cat"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": Codable {")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"let"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," name: "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"String")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"let"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," image: URL")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"}")))),Object(n.b)("p",null,"And let's assume we have an API to fetch a cat by name:"),Object(n.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":""},Object(n.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"GET /cat?id=2"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"{"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),'    "name": "Maggie",'),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),'    "image": "https://placekitten.com/200/200"'),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"}"))),Object(n.b)("p",null,"From an architectural point of view, we want to extract this into two different parts:"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"A ",Object(n.b)("inlineCode",{parentName:"li"},"NetworkService")," which makes the requests"),Object(n.b)("li",{parentName:"ol"},"A ",Object(n.b)("inlineCode",{parentName:"li"},"CatService")," which exposes a ",Object(n.b)("inlineCode",{parentName:"li"},"getCat(id:)")," method (this calls into the network service)")),Object(n.b)(c.a,{filename:"swift-di-1.png",alt:"Diagram of CatService calling NetworkService",caption:"",mdxType:"CaptionedImage"}),Object(n.b)("h2",null,"Binding"),Object(n.b)("p",null,"There's a clear ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"#seam"}),"seam")," between the ",Object(n.b)("inlineCode",{parentName:"p"},"NetworkService")," and ",Object(n.b)("inlineCode",{parentName:"p"},"CatService")," that we can use to test ",Object(n.b)("inlineCode",{parentName:"p"},"CatService"),". Let's extract the network's functionality into an interface:"),Object(n.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":"swift"},Object(n.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"protocol"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"NetworkInterface"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," {")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"func"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"makeRequest"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"(")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"url"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": URL,")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"completion"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"@escaping"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," (Result<Data, "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"Error"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),">) -> "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"Void")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    )")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"}")))),Object(n.b)("p",null,"And the concrete implementation:"),Object(n.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":""},Object(n.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"private class NetworkService: NetworkInterface {"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"    func makeRequest("),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"        url: URL,"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"        completion: @escaping (Result<Data, Error>) -> Void"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"    ) {"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"        // Use URLSession, etc"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"    }"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"}"))),Object(n.b)("p",null,"And now for the really interesting part - ",Object(n.b)("inlineCode",{parentName:"p"},"NetworkService")," will ",Object(n.b)("em",{parentName:"p"},"expose itself using a special function called bind"),' (I\'ve added the "SimpleDI" namespace here):'),Object(n.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":"swift"},Object(n.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"let"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," getNetwork = SimpleDI."),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"bind"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"(NetworkInterface.self) { "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"NetworkService"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"() }")))),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"bind")," returns ",Object(n.b)("inlineCode",{parentName:"p"},"getNetwork")," as a function which can be called to get a concrete implementation of the ",Object(n.b)("inlineCode",{parentName:"p"},"NetworkInterface")," protocol. ",Object(n.b)("inlineCode",{parentName:"p"},"CatService")," can then call ",Object(n.b)("inlineCode",{parentName:"p"},"getNetwork")," to get access to the network:"),Object(n.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":""},Object(n.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"class CatService {"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"    func getCat(id: Int, completion: @escaping (Result<Cat, Error>) -> Void) {"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"        let network = getNetwork()"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"        network.makeRequest(/* ... */)"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"    }"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"}"))),Object(n.b)(c.a,{filename:"swift-di-2.png",alt:"Diagram of CatService calling NetworkService, with bind as an intermediary",caption:"",mdxType:"CaptionedImage"}),Object(n.b)("h2",null,"Implementation"),Object(n.b)("p",null,"Before we talk about why ",Object(n.b)("inlineCode",{parentName:"p"},"bind")," is useful, let's discuss the implementation. ",Object(n.b)("inlineCode",{parentName:"p"},"bind")," returns a function which takes no parameters and returns a type of ",Object(n.b)("inlineCode",{parentName:"p"},"NetworkInterface"),", but it also takes a closure which will be used to generate the concrete implementation."),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"bind"),"'s body looks like this (again, paraphrased a bit from the talk):"),Object(n.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":"swift"},Object(n.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"private"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"var"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," instantiators: ["),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"String"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"Any"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"] = [:]")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}))),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"enum"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"SimpleDI"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," {")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"static"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"func"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"bind"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"<"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"T"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),">(")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"_"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"interfaceType"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": T.Type,")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"instantiator"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"@escaping"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," () -> T")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    ) -> () -> T {")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        instantiators["),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"String"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"("),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"describing"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": interfaceType)] = instantiator")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"return"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"self"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"."),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"instance")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    }")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}))),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"private"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"static"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"func"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"instance"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"<"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"T"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),">() -> T {")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"let"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," key = "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"String"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"("),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"describing"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": T.self)")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"let"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," instantiator = instantiators[key] as! () -> T")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"return"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"instantiator"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"()")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    }")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"}")))),Object(n.b)("p",null,"We take the closure that we're passed and save it in a dictionary (",Object(n.b)("a",Object.assign({parentName:"p"},{href:"#dictionary-atomic"}),"see end note"),"), then return a function which accesses and calls the closure we provided. Though we have to do some force casting, we're guaranteed that the closure we need will be there when ",Object(n.b)("inlineCode",{parentName:"p"},"getNetworkInterface")," is called, since we put it into ",Object(n.b)("inlineCode",{parentName:"p"},"instantiators")," before returning from ",Object(n.b)("inlineCode",{parentName:"p"},"bind"),"."),Object(n.b)("h2",null,"Testability"),Object(n.b)("p",null,"Using ",Object(n.b)("inlineCode",{parentName:"p"},"bind")," adds a level of indirection at the seam between ",Object(n.b)("inlineCode",{parentName:"p"},"NetworkService")," and ",Object(n.b)("inlineCode",{parentName:"p"},"CatService"),", which allows us to stub in a mock in tests. In order to do that, we need to define ",Object(n.b)("inlineCode",{parentName:"p"},"mock")," as well, and add a bit of more infrastructure:"),Object(n.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":"swift"},Object(n.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"private"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"var"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," instantiators: ["),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"String"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"Any"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"] = [:]")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"private"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"var"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," mockInstantiators: ["),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"String"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"Any"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"] = [:]")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}))),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"enum"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"SimpleDI"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," {")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"static"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"var"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," isTestEnvironment = "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"false")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}))),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"static"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"func"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"bind"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"<"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"T"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),">(")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"_"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"type"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": T.Type,")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"instantiator"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"@escaping"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," () -> T")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    ) -> () -> T {")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        instantiators["),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"String"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"("),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"describing"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": type)] = instantiator")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"return"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"self"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"."),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"instance")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    }")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}))),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"private"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"static"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"func"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"instance"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"<"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"T"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),">() -> T {")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"let"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," key = "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"String"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"("),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"describing"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": T.self)")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"if"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"self"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"."),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"isTestEnvironment"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," {")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"            "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"guard"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"let"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," instantiator = mockInstantiators[key] as? () -> T "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"else"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," {")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"                "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"fatalError"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"("),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk8"}),'"Type '),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk6"}),"\\\\"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk8"}),'(key) unmocked in test!"'),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),")")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"            }")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"            "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"return"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"instantiator"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"()")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        }")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"let"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," instantiator = instantiators[key] as! () -> T")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk15"}),"return"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"instantiator"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"()")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    }")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}))),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"static"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"func"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"mock"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"<"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"T"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),">("),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"_"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk12"}),"type"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": T.Type, "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"instantiator"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": "),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"@escaping"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," () -> T) {")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"        mockInstantiators["),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"String"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"("),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"describing"),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": type)] = instantiator")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    }")),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(n.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"}")))),Object(n.b)("p",null,"This code isn't very pretty - in fact, checks like ",Object(n.b)("inlineCode",{parentName:"p"},"isTestEnvironment")," are generally a code smell that mean you should refactor how the class works to avoid the check. However, this enables us to write tests very easily: all we have to do is set ",Object(n.b)("inlineCode",{parentName:"p"},"isTestEnvironment = true"),", and we'll be able to ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"#mock"}),"stub in a mock")," immediately using ",Object(n.b)("inlineCode",{parentName:"p"},"mock"),"."),Object(n.b)("h2",null,"Example"),Object(n.b)("p",null,"Let's say we want to write a test which makes sure CatService reports an error when the underlying network errors:"),Object(n.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":""},Object(n.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"class NetworkThatAlwaysErrors: NetworkInterface {"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"    func makeRequest(url: URL, completion: @escaping (Result<Data>) -> Void) {"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),'        completion(.error(error: NSError(domain: "", code: 0, userInfo: nil)))'),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"    }"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"}"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"})),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"class CatServiceTestCase: XCTestCase {"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"    func testCatServiceReportsError() {"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"        SimpleDI.isTestEnvironment = true"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"        SimpleDI.mock(NetworkInterface.self) { NetworkThatAlwaysErrors() }"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"})),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),'        let expecation = self.expectation(description: "Should return error")'),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"        let service = CatService()"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),'        service.getCatImage(named: "Maggie", completion: { result in'),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"            if case .error = result {"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"                expecation.fulfill()"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"            }"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"        })"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"        self.waitForExpectations(timeout: 0.2)"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"    }"),"\n",Object(n.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),"}"))),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"bind")," and ",Object(n.b)("inlineCode",{parentName:"p"},"mock")," take the dirty work of setting up the DI/mocking infrastructure and hide it under the rug, allowing us to write more expressive tests easily."),Object(n.b)(c.a,{filename:"swift-di-3.png",alt:"Diagram of bind and mock being used to separate CatService and NetworkService and stub in a mock in tests",caption:"",mdxType:"CaptionedImage"}),Object(n.b)("p",null,"Some interesting things to note:"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"Many people who've worked with DI have horror stories of passing 10/15+ dependencies into an initializer so they can be mocked in tests. ",Object(n.b)("inlineCode",{parentName:"li"},"bind")," brings the argument count down to 0 without sacrificing testability, and makes both the service and the test more elegant."),Object(n.b)("li",{parentName:"ol"},Object(n.b)("inlineCode",{parentName:"li"},"bind")," will error if you forget to mock out an interface in a test, so you're never accidentally calling deeper into dependencies than you mean to.")),Object(n.b)("a",{name:"downsides"}),Object(n.b)("h2",null,"Downsides"),Object(n.b)("p",null,"This approach is very similar to the ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Service_locator_pattern"}),"Service Locator Pattern"),", which is commonly criticized. I really enjoyed ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"https://badootech.badoo.com/singleton-service-locator-and-tests-in-ios-d69484e88944"}),"this article")," about Service Locator in iOS, and there are a few downsides that I should mention:"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"Using a service locator registry like ",Object(n.b)("inlineCode",{parentName:"li"},"bind")," means you have implicit instead of explicit dependencies. Instead of knowing explicitly that ",Object(n.b)("inlineCode",{parentName:"li"},"CatService")," depends on ",Object(n.b)("inlineCode",{parentName:"li"},"NetworkService"),", you have to look for the call to ",Object(n.b)("inlineCode",{parentName:"li"},"getNetwork"),". There's a tradeoff between the simplicity of using a service locator and the fact that it can make services with many dependencies more complex to reason about."),Object(n.b)("li",{parentName:"ol"},"With ",Object(n.b)("inlineCode",{parentName:"li"},"bind"),", it can be tough to recognize that you can update a test when a dependency of a service is removed. If ",Object(n.b)("inlineCode",{parentName:"li"},"CatService")," stopped calling out to the network, it's wouldn't be immediately apparent that ",Object(n.b)("inlineCode",{parentName:"li"},"NetworkThatAlwaysErrors")," could be deleted. This can lead to unnessary cognitive overhead in tests."),Object(n.b)("li",{parentName:"ol"},"When calling ",Object(n.b)("inlineCode",{parentName:"li"},"mock"),", you have to be ",Object(n.b)("em",{parentName:"li"},"very")," careful to set up your testing framework such that all the mocks get cleared after every test. Otherwise, you might have different behavior based on the order the tests are run, which can lead to flakes.")),Object(n.b)("h2",null,"Conclusion"),Object(n.b)("p",null,"It was really interesting to see how Lyft was able to come up with such a simple solution to a complex problem. I'd really recommend watching ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"https://www.youtube.com/watch?v=dA9rGQRwHGs"}),"the talk")," if you're interested in dependency injection and testing. If you'd like to see a working example of ",Object(n.b)("inlineCode",{parentName:"p"},"bind")," and ",Object(n.b)("inlineCode",{parentName:"p"},"mock"),", I've put one ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/noahsark769/NGSimpleDIExample"}),"here")," (it has a few differences from the code in this post in order to demonstrate an actual working request and test)."),Object(n.b)("h2",null,"Footnotes"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},Object(n.b)("a",{name:"dictionary-atomic"}),"Dictionary is not thread safe, so if you want to use `bind` and `mock` on multiple threads you'll need to implement something similar to an [atomic box](https://www.objc.io/blog/2018/12/18/atomic-variables/) (the talk mentions this)."),Object(n.b)("li",{parentName:"ol"},Object(n.b)("a",{name:"seam"}),'"[Seam](http://wiki.c2.com/?SoftwareSeam)" is a concept that seems to have been first coined in [Working Effectively With Legacy Code](https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052). It\'s defined as "[a place where two parts of the software meet and where something else can be injected](https://softwareengineering.stackexchange.com/questions/132563/problem-with-understanding-seam-word/311122)".'),Object(n.b)("li",{parentName:"ol"},Object(n.b)("a",{name:"mock"}),"You could even put `mock` in your test target to make sure it can't be called in production!")),Object(n.b)("style",{className:"vscode-highlight-styles"},".dark-default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.dark-default-dark .mtk1 { color: #D4D4D4; }\n.dark-default-dark .mtk2 { color: #1E1E1E; }\n.dark-default-dark .mtk3 { color: #6A9955; }\n.dark-default-dark .mtk4 { color: #569CD6; }\n.dark-default-dark .mtk5 { color: #D16969; }\n.dark-default-dark .mtk6 { color: #D7BA7D; }\n.dark-default-dark .mtk7 { color: #B5CEA8; }\n.dark-default-dark .mtk8 { color: #CE9178; }\n.dark-default-dark .mtk9 { color: #646695; }\n.dark-default-dark .mtk10 { color: #4EC9B0; }\n.dark-default-dark .mtk11 { color: #DCDCAA; }\n.dark-default-dark .mtk12 { color: #9CDCFE; }\n.dark-default-dark .mtk13 { color: #000080; }\n.dark-default-dark .mtk14 { color: #F44747; }\n.dark-default-dark .mtk15 { color: #C586C0; }\n.dark-default-dark .mtk16 { color: #6796E6; }\n.dark-default-dark .mtk17 { color: #808080; }\n.dark-default-dark .mtki { font-style: italic; }\n.dark-default-dark .mtkb { font-weight: bold; }\n.dark-default-dark .mtku { text-decoration: underline; text-underline-position: under; }"))}m.isMDXComponent=!0},261:function(e,a,t){"use strict";t.d(a,"d",function(){return j}),t.d(a,"b",function(){return O}),t.d(a,"c",function(){return N}),t.d(a,"g",function(){return h}),t.d(a,"e",function(){return u}),t.d(a,"f",function(){return k}),t.d(a,"a",function(){return f});var n=t(2),s=t(263),c=t.n(s),i=t(264),p=t.n(i),r=t(265),m=t.n(r),b=t(266),o=t.n(b);function l(){var e=g(["\n    @font-face {\n        font-family: 'Bariol';\n        src: url('","');\n        src: url('","?#iefix') format('embedded-opentype'),\n            url('","') format('woff'),\n            url('","') format('truetype'),\n            url('","#svgBariolRegular') format('svg');\n    }\n\n    * {\n        box-sizing: border-box !important;\n    }\n\n    body {\n        margin: 0;\n        padding: 0;\n    }\n\n    @media (prefers-color-scheme: dark) {\n        html, body {\n            background-color: #2b2c2f;\n        }\n    }\n"]);return l=function(){return e},e}function d(){var e=g(["\n    @font-face {\n        font-family: 'Bariol';\n        src: url('","');\n        src: url('","?#iefix') format('embedded-opentype'),\n             url('","') format('woff'),\n             url('","') format('truetype'),\n             url('","#svgBariolRegular') format('svg');\n    }\n\n    * {\n        box-sizing: border-box !important;\n    }\n\n    body {\n        margin: 0;\n        padding: 0;\n    }\n"]);return d=function(){return e},e}function g(e,a){return a||(a=e.slice(0)),e.raw=a,e}var j=Object(n.a)(d(),c.a,c.a,p.a,m.a,o.a),O=Object(n.a)(l(),c.a,c.a,p.a,m.a,o.a),N=n.c.div.withConfig({displayName:"default__Div",componentId:"d4l1a1-0"})([""]),h=(n.c.nav.withConfig({displayName:"default__Nav",componentId:"d4l1a1-1"})([""]),n.c.ul.withConfig({displayName:"default__UL",componentId:"d4l1a1-2"})(["margin:0;padding:0;"])),u=n.c.li.withConfig({displayName:"default__LI",componentId:"d4l1a1-3"})(["margin:0;padding:0;"]),k=n.c.p.withConfig({displayName:"default__P",componentId:"d4l1a1-4"})(["margin:0;padding:0;"]),f=n.c.a.withConfig({displayName:"default__A",componentId:"d4l1a1-5"})(["&,&:hover,&:focus{outline:none;color:inherit;text-decoration:none;}"])},263:function(e,a,t){e.exports=t.p+"static/Bariol-Regular-b0d07df351f442860551405a4be58de7.eot"},264:function(e,a,t){e.exports=t.p+"static/Bariol-Regular-4afd94f0fd93a1f63b46c6c6ad792f71.woff"},265:function(e,a,t){e.exports=t.p+"static/Bariol-Regular-8a7d23d53f8d118e190c63e4e81a91fe.ttf"},266:function(e,a,t){e.exports=t.p+"static/Bariol-Regular-75b90056f4cdf5a742897ec0a59569d7.svg"},267:function(e,a,t){"use strict";var n=t(0),s=t.n(n),c=t(261),i=t(66),p=t(2),r=t(271),m=t(272),b=p.c.nav.withConfig({displayName:"Nav__StyledNav",componentId:"sc-1cm9dpf-0"})(["display:flex;flex-direction:row;flex-wrap:wrap;padding:20px 60px;border-bottom:1px solid #ddd;@media all and (max-width:600px){padding:20px;}@media (prefers-color-scheme:dark){border-color:#777;}"]),o=p.c.div.withConfig({displayName:"Nav__Title",componentId:"sc-1cm9dpf-1"})(['flex:2;font-family:"Roboto","Helvetica Neue","Helvetica",sans-serif;font-size:28px;font-display:swap;@media (prefers-color-scheme:dark){color:#fff;}']),l=Object(p.c)(c.g).withConfig({displayName:"Nav__NavLinks",componentId:"sc-1cm9dpf-2"})(["flex:10;display:flex;flex-direction:horizontal;flex-wrap:wrap;justify-content:flex-end;height:100%;align-self:center;"]),d=Object(p.c)(c.e).withConfig({displayName:"Nav__NavLink",componentId:"sc-1cm9dpf-3"})(['display:flex;flex-direction:vertical;align-items:center;text-align:center;font-family:"Bariol","Helvetica Neue","Helvetica",sans-serif;font-size:16px;padding:0px 20px;']),g=Object(p.c)(c.a).withConfig({displayName:"Nav__StyledA",componentId:"sc-1cm9dpf-4"})(["height:auto;color:",";display:flex;flex-direction:vertical;align-items:center;-webkit-transition:0.2s ease-in-out;-moz-transition:0.2s ease-in-out;-o-transition:0.2s ease-in-out;transition:0.2s ease-in-out;&:hover{color:",";}"],i.a,i.b);a.a=function(e){return s.a.createElement(b,null,s.a.createElement(o,null,s.a.createElement(g,{href:e.blog?"/blog":"/"},"NOAH GILMORE")),s.a.createElement(l,null,s.a.createElement(d,null,s.a.createElement(g,{"aria-label":"Blog Home",href:"/blog"},s.a.createElement(r.b,{color:i.a,size:"24"}))),s.a.createElement(d,null,s.a.createElement(g,{"aria-label":"Twitter",href:"https://twitter.com/noahsark769"},s.a.createElement(m.a,{color:i.a,size:"24"}))),s.a.createElement(d,null,s.a.createElement(g,{"aria-label":"App Store",href:"https://itunes.apple.com/us/app/trestle-the-new-sudoku/id1300230302?mt=8"},s.a.createElement(r.a,{color:i.a,size:"24"})))))}},268:function(e,a,t){"use strict";t.d(a,"a",function(){return p}),t.d(a,"b",function(){return o});var n=t(0),s=t.n(n),c=t(2),i=t(262);var p=c.c.div.withConfig({displayName:"BlogPost__BlogPostContainer",componentId:"gyfnna-0"})(["padding:60px 0;margin:0 auto;width:90%;@media all and (min-width:600px){max-width:",";margin:auto;}@media all and (max-width:600px){width:100%;padding:20px 0;","}"],function(e){return e.isCompressed?"700px":"1600px"},function(e){return e.darkened&&Object(c.b)(["background-color:#f6f6f6;@media (prefers-color-scheme:dark){background-color:inherit;}"])}),r=c.c.div.withConfig({displayName:"BlogPost__TitleContainer",componentId:"gyfnna-1"})(["width:100%;margin-bottom:40px;"]),m=c.c.h1.withConfig({displayName:"BlogPost__Heading",componentId:"gyfnna-2"})(['width:100%;font-family:"Roboto","Helvetica Neue","Helvetica",sans-serif;font-size:34px;margin-bottom:10px;line-height:1.2em;@media (prefers-color-scheme:dark){color:#fff;}']),b=c.c.p.withConfig({displayName:"BlogPost__DateContainer",componentId:"gyfnna-3"})(['font-family:"Gentium Book Basic",times,serif;font-style:italic;font-size:16px;color:#999;']),o=function(e){return s.a.createElement("div",null,s.a.createElement(i.Helmet,null,s.a.createElement("title",null,e.title)),s.a.createElement(r,null,s.a.createElement(m,null,e.title),s.a.createElement(b,null,e.date)))};s.a.Component},269:function(e,a,t){"use strict";t.d(a,"a",function(){return i});var n=t(0),s=t.n(n);var c=t(2).c.div.withConfig({displayName:"MarkdownContent__Container",componentId:"zl3v0s-0"})(['p,li{margin:0;padding:0;font-family:"Gentium Book Basic",times,serif;font-size:21px;line-height:29px;color:#333;padding-bottom:15px;margin-top:15px;@media all and (max-width:600px){width:90%;margin:15px auto 0 auto;}@media (prefers-color-scheme:dark){color:#fff;}}blockquote{background-color:#faf9f7;border-left:4px solid #e5e4e1;padding:20px;font-style:italic;@media (prefers-color-scheme:dark){background-color:#3f3f3f;}p{margin:0;padding:0;color:#555;@media (prefers-color-scheme:dark){color:#fff;}}}a{color:#1A3F4B;-webkit-transition:0.2s ease-in-out;-moz-transition:0.2s ease-in-out;-o-transition:0.2s ease-in-out;transition:0.2s ease-in-out;@media (prefers-color-scheme:dark){color:#60b5d1;}}a:hover{color:#47656E;@media (prefers-color-scheme:dark){color:#6bcfef;}}code{font-family:monospace;font-size:16px;padding:3px 5px;margin:0px 2px;@media (prefers-color-scheme:dark){color:#fff;}}code:not(.vscode-highlight-code){font-family:monospace;font-size:16px;background-color:#faf9f7;border:1px solid #e5e4e1;padding:3px 5px;margin:0px 2px;color:#555;@media (prefers-color-scheme:dark){color:#fff;background-color:#3f3f3f;}}code:first-child{margin-left:0;}pre{display:block;margin:0;padding:0;margin-top:10px;border:1px solid #e5e4e1;border-radius:2px;@media all and (max-width:600px){width:100%;margin:10px auto 0 auto;border-left:none;border-right:none;border-radius:0;overflow-x:scroll;}}pre > code{display:block;margin:0;padding:10px;font-family:monospace;font-size:14px;line-height:17px;white-space:pre-wrap;@media all and (max-width:600px){font-size:15px;white-space:pre;padding:15px 5% 15px 5%;width:100%;}}pre + p{margin-top:30px;}ol{margin-left:30px;@media all and (max-width:600px){width:90%;margin:0 auto 0 30px;}@media (prefers-color-scheme:dark){color:#fff;}}ol li{list-style-type:decimal;}ul li{list-style-type:square;margin-left:40px;@media all and (max-width:600px){width:90%;margin:0 auto;}@media (prefers-color-scheme:dark){color:#fff;}}h1,h2,h3,h4,h5,h6{width:100%;font-family:"Roboto","Helvetica Neue","Helvetica",sans-serif;margin-bottom:10px;margin-top:40px;@media all and (max-width:600px){width:90%;margin:40px auto 10px auto;}@media (prefers-color-scheme:dark){color:#fff;}}h1{font-size:28px;}h2{font-size:24px;}h3{font-size:20px;}em{font-style:italic;}strong{font-weight:bold;}']),i=function(e){var a,t;function n(){return e.apply(this,arguments)||this}return t=e,(a=n).prototype=Object.create(t.prototype),a.prototype.constructor=a,a.__proto__=t,n.prototype.render=function(){return s.a.createElement(c,null,this.props.children)},n}(s.a.Component)},270:function(e,a,t){"use strict";function n(e){return new Date(e).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"})}t.d(a,"a",function(){return n})},273:function(e,a,t){"use strict";t(114);var n=t(0),s=t.n(n),c=t(262),i=t(261),p=t(267),r=t(2),m=t(271),b=t(272),o=t(66);var l=r.c.div.withConfig({displayName:"EndButtons__Container",componentId:"sc-2ta1su-0"})(["width:100%;display:flex;flex-direction:horizontal;align-items:center;justify-content:center;margin-top:40px;"]),d=r.c.div.withConfig({displayName:"EndButtons__ButtonStyle",componentId:"sc-2ta1su-1"})(["background-color:",";-webkit-transition:0.2s ease-in-out;-moz-transition:0.2s ease-in-out;-o-transition:0.2s ease-in-out;transition:0.2s ease-in-out;&:hover{background-color:",";}width:100px;padding:10px 20px;text-align:center;display:flex;flex-direction:vertical;align-items:center;justify-content:center;border-radius:4px;",";"],o.a,o.b,function(e){return e.margin&&Object(r.b)(["margin-right:20px;"])}),g=function(e){return s.a.createElement(i.a,{href:e.url,target:e.newTab?"_blank":null,"aria-label":e.label},s.a.createElement(d,{margin:e.margin},e.children))},j=function(e){var a,t;function n(){return e.apply(this,arguments)||this}return t=e,(a=n).prototype=Object.create(t.prototype),a.prototype.constructor=a,a.__proto__=t,n.prototype.render=function(){var e,a=(e="Post by @noahsark769: "+this.props.tweetTitle+" "+this.props.tweetUrl,"https://twitter.com/intent/tweet?text="+encodeURIComponent(e));return s.a.createElement(l,null,s.a.createElement(g,{label:"Twitter",url:a,newTab:!0,margin:!0},s.a.createElement(b.a,{size:24,color:"white"})),s.a.createElement(g,{label:"Blog homepage",url:"/blog"},s.a.createElement(m.b,{size:24,color:"white"})))},n}(s.a.Component),O=t(268),N=t(269),h=t(270),u=t(46);var k=r.c.div.withConfig({displayName:"Disqus__Wrapper",componentId:"sc-1jjeqqj-0"})(["margin-top:80px;"]),f=function(e){var a,t;function n(){return e.apply(this,arguments)||this}t=e,(a=n).prototype=Object.create(t.prototype),a.prototype.constructor=a,a.__proto__=t;var c=n.prototype;return c.render=function(){return s.a.createElement(k,null,s.a.createElement("div",{id:"disqus_thread"}))},c.componentDidMount=function(){var e,a;e=document,(a=e.createElement("script")).src="//noahgilmore-com.disqus.com/embed.js",a.setAttribute("data-timestamp",+new Date),(e.head||e.body).appendChild(a)},n}(s.a.Component),v=t(115),w=t.n(v);t.d(a,"a",function(){return S});var y=r.c.div.withConfig({displayName:"BlogPageLayout__Container",componentId:"sc-118ribu-0"})(["@media (prefers-color-scheme:dark){background-color:#2b2c2f;}"]),x=r.c.div.withConfig({displayName:"BlogPageLayout__NonContent",componentId:"sc-118ribu-1"})(["@media all and (max-width:600px){padding-right:5%;padding-left:5%;}"]),C=r.c.div.withConfig({displayName:"BlogPageLayout__InstabugContainer",componentId:"sc-118ribu-2"})(["min-width:430px;margin-left:60px;@media all and (max-width:1200px){display:none;}"]),E=r.c.div.withConfig({displayName:"BlogPageLayout__InstabugInner",componentId:"sc-118ribu-3"})([""]),I=r.c.div.withConfig({displayName:"BlogPageLayout__PostContainerOuter",componentId:"sc-118ribu-4"})(["display:flex;flex-direction:row;padding:",";@media all and (max-width:1200px){padding:0;}"],function(e){return e.hasPadding?"20px":"0"}),_=r.c.div.withConfig({displayName:"BlogPageLayout__PostContainerInner",componentId:"sc-118ribu-5"})(["display:block;flex-direction:column;width:100%;"]),S=function(e){var a,t;function n(a){var t;return(t=e.call(this,a)||this).state={isShowingInstabug:!0},t}t=e,(a=n).prototype=Object.create(t.prototype),a.prototype.constructor=a,a.__proto__=t;var r=n.prototype;return r.handleInstabugHide=function(){this.setState({isShowingInstabug:!1})},r.render=function(){var e=this,a="undefined"!=typeof window&&window.matchMedia("(prefers-color-scheme: dark)").matches;return s.a.createElement(y,null,s.a.createElement(i.b,null),s.a.createElement(c.Helmet,null,s.a.createElement("link",{href:"https://fonts.googleapis.com/css?family=Roboto:700",rel:"stylesheet",type:"text/css"}),s.a.createElement("link",{href:"https://fonts.googleapis.com/css?family=Gentium+Book+Basic",rel:"stylesheet"}),!a&&s.a.createElement("link",{rel:"stylesheet",href:"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.13.0/styles/atom-one-light.min.css"}),a&&s.a.createElement("link",{rel:"stylesheet",href:"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.13.0/styles/zenburn.min.css"}),s.a.createElement("meta",{name:"twitter:card",content:"summary"}),s.a.createElement("meta",{name:"twitter:creator",content:"@noahsark769"}),s.a.createElement("meta",{property:"og:url",content:"https://noahgilmore.com"+this.props.location.pathname}),s.a.createElement("meta",{property:"og:title",content:this.props.pageContext.frontmatter.title}),s.a.createElement("meta",{property:"og:description",content:this.props.pageContext.frontmatter.staticPreview}),s.a.createElement("meta",{name:"description",content:this.props.pageContext.frontmatter.staticPreview})),s.a.createElement(p.a,{blog:!0}),s.a.createElement(O.a,{isCompressed:!this.state.isShowingInstabug||!this.props.pageContext.frontmatter.instabugEnabled},s.a.createElement(I,{hasPadding:this.state.isShowingInstabug&&this.props.pageContext.frontmatter.instabugEnabled},s.a.createElement(_,null,s.a.createElement(x,null,s.a.createElement(O.b,{title:this.props.pageContext.frontmatter.title,date:Object(h.a)(this.props.pageContext.frontmatter.date)})),s.a.createElement(N.a,null,this.props.children),s.a.createElement(x,null,s.a.createElement(j,{tweetTitle:this.props.pageContext.frontmatter.title,tweetUrl:"https://noahgilmore.com"+this.props.location.pathname}),s.a.createElement(f,null))),this.state.isShowingInstabug&&this.props.pageContext.frontmatter.instabugEnabled&&s.a.createElement(C,null,s.a.createElement(E,null,s.a.createElement(u.a,{onHide:function(){return e.handleInstabugHide()}}))))))},r.componentDidMount=function(){w.a.initialize("UA-35325391-1"),w.a.pageview(window.location.pathname+window.location.search)},n}(s.a.Component)}}]);
//# sourceMappingURL=component---src-pages-blog-swift-dependency-injection-mdx-b17b80615c54b48086ea.js.map