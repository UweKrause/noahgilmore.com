(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{k1B9:function(e,a,s){"use strict";s.r(a),s.d(a,"_frontmatter",(function(){return c})),s.d(a,"default",(function(){return m}));s("rGqo"),s("yt8O"),s("Btvt"),s("RW0V"),s("91GP"),s("q1tI");var t=s("E/Ix"),n=s("1zrH");var c={},b={_frontmatter:c},p=n.a;function m(e){var a=e.components,s=function(e,a){if(null==e)return{};var s,t,n={},c=Object.keys(e);for(t=0;t<c.length;t++)s=c[t],a.indexOf(s)>=0||(n[s]=e[s]);return n}(e,["components"]);return Object(t.b)(p,Object.assign({},b,s,{components:a,mdxType:"MDXLayout"}),Object(t.b)("p",null,"Whenever a new major version of Xcode is released, one of the first things I do is download it and run it with the various codebases I'm working on. Usually the new version of Swift is smarter and can surface more warnings and diagnostics, and the Xcode 12 beta release earlier this week (with Swift 5.3) is no exception."),Object(t.b)("p",null,"However, there was one new warning message the confused me:"),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},"expression shuffles the elements of this tuple; this behavior is deprecated")),Object(t.b)("p",null,"tl;dr: If you see this message it probably means you're passing a tuple to a method with the named elements in the wrong order, e.g.:"),Object(t.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":"swift"},Object(t.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(t.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"func"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"myMethod"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"("),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"tuple"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": (a: "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"Int"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),", b: "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"Int"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),")) {")),"\n",Object(t.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"print"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"(tuple)")),"\n",Object(t.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"}")),"\n",Object(t.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}))),"\n",Object(t.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"myMethod"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"("),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"tuple"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": ("),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"b"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk7"}),"1"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),", "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"a"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk7"}),"2"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),")) "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk3"}),"// should be myMethod(tuple: (a: 2, b: 1))")))),Object(t.b)("h1",{id:"tuple-shuffling"},"Tuple Shuffling"),Object(t.b)("p",null,'Tuple Shuffling is a deprecated feature of Swift which basically amounts to "you can switch the order of named tuple elements during assignment". If you declare a tuple with named elements in a certain order, you don\'t have to pass them in the same order.'),Object(t.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":"swift"},Object(t.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(t.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"func"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"myMethod"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"("),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"tuple"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": (a: "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"Int"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),", b: "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"Int"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),")) {")),"\n",Object(t.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"    "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"print"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"(tuple)")),"\n",Object(t.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"}")),"\n",Object(t.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}))),"\n",Object(t.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk3"}),"// This is perfectly legal, even though b comes before a")),"\n",Object(t.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"myMethod"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"("),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"tuple"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": ("),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"b"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk7"}),"1"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),", "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"a"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk7"}),"2"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"))")))),Object(t.b)("p",null,"However, Tuple Shuffling is generally something that you shouldn't do, because it can have subtle and confusing side effects. For example, consider the following code:"),Object(t.b)("pre",{className:"dark-default-dark vscode-highlight","data-language":"swift"},Object(t.b)("code",Object.assign({parentName:"pre"},{className:"vscode-highlight-code"}),Object(t.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"var"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," a: ("),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"Int"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),", "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"y"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"Int"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),") = ("),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk7"}),"2"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),", "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk7"}),"1"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),")")),"\n",Object(t.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk4"}),"var"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"})," b: ("),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"y"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),": "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"Int"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),", "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk10"}),"Int"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),") = ("),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk7"}),"1"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),", "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk7"}),"2"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),")")),"\n",Object(t.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}))),"\n",Object(t.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"a = b")),"\n",Object(t.b)("span",Object.assign({parentName:"code"},{className:"vscode-highlight-line"}),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk11"}),"print"),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk1"}),"(a == b) "),Object(t.b)("span",Object.assign({parentName:"span"},{className:"mtk3"}),'// prints "false"')))),Object(t.b)("p",null,"This is also perfectly legal code, but it's weird that the two tuples aren't equal, even after you assigned one to the other!"),Object(t.b)("p",null,"This example works because ",Object(t.b)("inlineCode",{parentName:"p"},"a = b")," does an implicit Tuple Shuffle - the ",Object(t.b)("inlineCode",{parentName:"p"},"y"),"th element of ",Object(t.b)("inlineCode",{parentName:"p"},"b")," is assigned to the ",Object(t.b)("inlineCode",{parentName:"p"},"y"),"th element of ",Object(t.b)("inlineCode",{parentName:"p"},"a"),", and the first non-named element of ",Object(t.b)("inlineCode",{parentName:"p"},"b")," is assigned to the first non-named element of ",Object(t.b)("inlineCode",{parentName:"p"},"a"),". Because ",Object(t.b)("inlineCode",{parentName:"p"},"a.y")," and ",Object(t.b)("inlineCode",{parentName:"p"},"b.y")," were already the same and the first non-named element of each tuple (",Object(t.b)("inlineCode",{parentName:"p"},"a.0")," and ",Object(t.b)("inlineCode",{parentName:"p"},"b.1"),") was also the same, the assignment is effectively a no-op."),Object(t.b)("p",null,"The standard library implementation of ",Object(t.b)("inlineCode",{parentName:"p"},"==")," for tuples compares them index-wise (it's equivalent to ",Object(t.b)("inlineCode",{parentName:"p"},"a.0 == b.0 && a.1 == b.1")," in this case), and these tuples were never index-wise equal, so ",Object(t.b)("inlineCode",{parentName:"p"},"a == b")," returns false."),Object(t.b)("p",null,"As ",Object(t.b)("a",Object.assign({parentName:"p"},{href:"https://forums.swift.org/t/deprecating-tuple-shuffles-round-2/16884"}),"the folks who proposed the Tuple Shuffling deprecation in the forums said"),", Tuple Shuffling allows inconsistencies between how Swift works as a language and how the standard library methods work."),Object(t.b)("h1",{id:"fixing-the-warning"},"Fixing the warning"),Object(t.b)("p",null,"The proposal to deprecate Tuple Shuffling has been around since 2018 - it appears that in Swift 5.3, the warning against shuffling is finally there."),Object(t.b)("p",null,"The usually warning comes up in practice when you try to pass a tuple of the form ",Object(t.b)("inlineCode",{parentName:"p"},"(a: 1, b: 1)")," to an argument that expects a different ordering of names (",Object(t.b)("inlineCode",{parentName:"p"},"(b: Int, a: Int)"),"). The fix for this is almost always to pass your named tuple elements in the order they're defined (",Object(t.b)("inlineCode",{parentName:"p"},"a")," first, then ",Object(t.b)("inlineCode",{parentName:"p"},"b"),")."),Object(t.b)("style",{className:"vscode-highlight-styles"},"\n  \n  .dark-default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.dark-default-dark .mtk1 { color: #D4D4D4; }\n.dark-default-dark .mtk2 { color: #1E1E1E; }\n.dark-default-dark .mtk3 { color: #6A9955; }\n.dark-default-dark .mtk4 { color: #569CD6; }\n.dark-default-dark .mtk5 { color: #D16969; }\n.dark-default-dark .mtk6 { color: #D7BA7D; }\n.dark-default-dark .mtk7 { color: #B5CEA8; }\n.dark-default-dark .mtk8 { color: #CE9178; }\n.dark-default-dark .mtk9 { color: #646695; }\n.dark-default-dark .mtk10 { color: #4EC9B0; }\n.dark-default-dark .mtk11 { color: #DCDCAA; }\n.dark-default-dark .mtk12 { color: #9CDCFE; }\n.dark-default-dark .mtk13 { color: #000080; }\n.dark-default-dark .mtk14 { color: #F44747; }\n.dark-default-dark .mtk15 { color: #C586C0; }\n.dark-default-dark .mtk16 { color: #6796E6; }\n.dark-default-dark .mtk17 { color: #808080; }\n.dark-default-dark .mtki { font-style: italic; }\n.dark-default-dark .mtkb { font-weight: bold; }\n.dark-default-dark .mtku { text-decoration: underline; text-underline-position: under; }\n"))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-blog-tuple-shuffling-mdx-51d3a45368cbf0ff35b6.js.map